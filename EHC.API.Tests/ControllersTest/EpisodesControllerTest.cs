#region Header

// Schlumberger Private
// Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using FluentAssertions;
using Microsoft.AspNetCore.Mvc;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Newtonsoft.Json.Linq;
using NSubstitute;
using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using NSubstitute.ExceptionExtensions;
using Tlm.Sdk.Api;
using Tlm.Sdk.Core.Models.Querying;
using TLM.EHC.API;
using TLM.EHC.API.Common;
using TLM.EHC.API.ControllerModels;
using TLM.EHC.API.Controllers;
using TLM.EHC.Common.Historian;
using TLM.EHC.API.Services;
using TLM.EHC.API.WritingData;
using TLM.EHC.API.ControllerModels.Separated;
using TLM.EHC.Common.Services;
using TLM.EHC.Common;
using Tlm.Sdk.Testing.Unit;

namespace EHC.API.Tests.ControllersTest
{
    [UnitTestCategory]
    [TestClass]
    public class EpisodesControllerTest
    {
        private MockRepository _mockProvider;
        private Mock<IEpisodeService> _mockEpisodeService;
        private Mock<IGetCollectionFromCacheStrategy<Episode>> _mockmultiResourceGetter;
        private Mock<IGetFromCacheStrategy<Episode>> _mockSingleResourceGetter;
        private Mock<IApiImplementation> _mockApiImplementation;
        private Mock<IDataParser> _mockDataParser;
        private Mock<IDataMapper> _mockDataMapper;
        private Mock<IEpisodicPointService> _mockEpisodicPointService;
        private Mock<IEquipmentProvider> _mockEquipmentProvider;
        private EhcApiConfig _config;

        [TestInitialize]

        public void TestInitialize()
        {
            _mockProvider = new MockRepository(MockBehavior.Loose);
            _mockEpisodeService = _mockProvider.Create<IEpisodeService>();
            _mockmultiResourceGetter = _mockProvider.Create<IGetCollectionFromCacheStrategy<Episode>>();
            _mockSingleResourceGetter = _mockProvider.Create<IGetFromCacheStrategy<Episode>>();
            _mockEpisodicPointService = _mockProvider.Create<IEpisodicPointService>();
            _mockApiImplementation = _mockProvider.Create<IApiImplementation>();
            _mockDataParser = _mockProvider.Create<IDataParser>();
            _mockDataMapper = _mockProvider.Create<IDataMapper>();
            _mockEquipmentProvider = _mockProvider.Create<IEquipmentProvider>();
            _config = new EhcApiConfig();
        }

        [TestCleanup]
        public void CleanUp()
        {
            _mockProvider = null;
            _mockApiImplementation = null;
            _mockDataParser = null;
            _mockDataMapper = null;
            _mockEpisodeService = null;
            _mockmultiResourceGetter = null;
            _mockSingleResourceGetter = null;
            _mockEpisodicPointService = null;
            _mockEquipmentProvider = null;
            _config = null;
        }

        [TestMethod]
        public void Class_Should_Be_Decorated()
        {
            ApiBaseTest.ValidateClassAttributes<EpisodesController>();
        }

        [TestMethod]
        public void Get_Should_Be_Decorated()
        {
            ApiBaseTest.ValidateGetMethodsWithBadRequestAttributes<EpisodesController>();
            ApiBaseTest.ValidateGetMethodsWithProduceOkAttributes<Episode, EpisodesController>();
        }

        [TestMethod]
        public async Task Should_Return_Episodes()
        {
            var episodeController = GetEpisodesController();

            var querySpec = QuerySpec.ForEverything;

            IActionResult result = new OkResult();
            _mockmultiResourceGetter.Setup(x => x.GetCollection(It.IsAny<QuerySpec>()))
                .Returns(Task.FromResult(result));

            var actualResult = await episodeController.GetEpisodes(querySpec);

            Assert.IsInstanceOfType(actualResult, typeof(OkResult));
        }

        [TestMethod]
        public async Task Should_Return_Episode_By_Id()
        {
            //arrange
            var id = Guid.NewGuid().ToString();

            var returnObject = new Episode
            {
                Id = id,
                Name = "xyz"
            };

            var ret = new OkObjectResult(returnObject);
            _mockSingleResourceGetter
                .Setup(x => x.GetSingleRepresentationById<EpisodesController>(
                    It.Is<string>(s => s == returnObject.Id),
                    It.IsAny<QuerySpec>()))
                .Returns(Task.FromResult<IActionResult>(ret));

            var uat = GetEpisodesController();

            //act
            var result = await uat.GetEpisodeById(id, QuerySpec.ForEverything);

            //assert
            result.Should().NotBeNull();
            ((OkObjectResult)result).Value.Should().BeOfType(returnObject.GetType());
            ((OkObjectResult)result).Value.Should().Be(returnObject);

        }


        [TestMethod]
        public async Task Should_Create_Episode_With_DataPoints()
        {

            var inputJson = Get_Dummy_Json();
            var createdEpisodeId = Guid.NewGuid().ToString();
            var episodeParsed = inputJson.ToObject<Episode>();
            var dummyParentEpisode = new Episode { Id = "5e2214cd8fc5500001132157", Name = "ParentEpisode" };

            var parsedChannels = new ParsedChannels();
            ChannelIndexed ci0 = new ChannelIndexed() { Code = "time", Name = "time", Dimension = "time", Uom = "d" };
            ChannelIndexed ci1 = new ChannelIndexed() { Code = "DischargeRate", Name = "DischargeRate", Dimension = "ratio", Uom = "Unitless" };
            parsedChannels.Channels = new ChannelIndexed[2] { ci0, ci1 };

            _mockDataParser.Setup(x => x.ParseChannels(inputJson)).Returns(parsedChannels);

            _mockEpisodeService.Setup(s => s.GetEpisodeById("5e2214cd8fc5500001132157")).Returns(Task.FromResult(dummyParentEpisode));
            _mockEpisodeService.Setup(s => s.CreateEpisode(episodeParsed)).Returns(Task.FromResult(createdEpisodeId));

            var episodeController = GetEpisodesController();
            var actualResult = await episodeController.CreateEpisode(inputJson.ToObject<EpisodeRequest>());

            actualResult.Should().NotBeNull();
            Assert.IsInstanceOfType(actualResult, typeof(OkObjectResult));

            _mockDataParser.Verify(o => o.ParseRowsBulkData(It.IsAny<JToken>()), Times.Once);
            _mockDataMapper.Verify(o => o.ValidateAndMapChannels(It.IsAny<ParsedChannels>()), Times.Once);
            _mockDataMapper.Verify(o => o.MapToInfluxRowsBulk(It.IsAny<ParsedRows[]>(), It.IsAny<ChannelDefinitionIndex[]>()), Times.Once);

        }

        [TestMethod]
        public async Task Should_Check_IsAvatarChildEpisode_ForNull_EpisodeType()
        {
            var inputJson = Get_Dummy_Json();
            var createdEpisodeId = Guid.NewGuid().ToString();
            var episodeParsed = inputJson.ToObject<Episode>();
            var dummyParentEpisode = new Episode
            {
                Id = "5f6287c08859500001e3f78b",
                Name = "EpisodicTestData",
                EquipmentWkeIdList = new List<string>(),
                ParentId = null,
                Type = null,
            };

            var parsedChannels = new ParsedChannels();
            ChannelIndexed ci0 = new ChannelIndexed() { Code = "time", Name = "time", Dimension = "time", Uom = "d" };
            ChannelIndexed ci1 = new ChannelIndexed() { Code = "DischargeRate", Name = "DischargeRate", Dimension = "ratio", Uom = "Unitless" };
            parsedChannels.Channels = new ChannelIndexed[2] { ci0, ci1 };

            _mockDataParser.Setup(x => x.ParseChannels(inputJson)).Returns(parsedChannels);

            _mockEpisodeService.Setup(s => s.GetEpisodeById("5f6287c08859500001e3f78b")).Returns(Task.FromResult(dummyParentEpisode));
            _mockEpisodeService.Setup(s => s.CreateEpisode(episodeParsed)).Returns(Task.FromResult(createdEpisodeId));

            var episodeController = GetEpisodesController();
            var actualResult = await episodeController.CreateEpisode(inputJson.ToObject<EpisodeRequest>());
            Assert.That.Should().NotBeNull();
            Assert.IsInstanceOfType(actualResult, typeof(OkObjectResult));
        }

        [TestMethod]
        public async Task Should_Check_IsAvatarChildEpisode_ForEpisodeType()
        {
            var inputJson = Get_Dummy_Json_ForCoringEpisodeType();
            var createdEpisodeId = Guid.NewGuid().ToString();
            var episodeParsed = inputJson.ToObject<Episode>();
            var dummyParentEpisode = new Episode
            {
                Id = "5f6287c08859500001e3f78b",
                Name = "EpisodicTestData",
                EquipmentWkeIdList = new List<string>(),
                ParentId = null,
                Type = "coring",
            };

            var parsedChannels = new ParsedChannels();
            ChannelIndexed ci0 = new ChannelIndexed() { Code = "time", Name = "time", Dimension = "time", Uom = "d" };
            ChannelIndexed ci1 = new ChannelIndexed() { Code = "DischargeRate", Name = "DischargeRate", Dimension = "ratio", Uom = "Unitless" };
            parsedChannels.Channels = new ChannelIndexed[2] { ci0, ci1 };

            _mockDataParser.Setup(x => x.ParseChannels(inputJson)).Returns(parsedChannels);

            _mockEpisodeService.Setup(s => s.GetEpisodeById("5f6287c08859500001e3f78b")).Returns(Task.FromResult(dummyParentEpisode));
            _mockEpisodeService.Setup(s => s.CreateEpisode(episodeParsed)).Returns(Task.FromResult(createdEpisodeId));

            var episodeController = GetEpisodesController();
            var actualResult = await episodeController.CreateEpisode(inputJson.ToObject<EpisodeRequest>());
            Assert.That.Should().NotBeNull();
            Assert.IsInstanceOfType(actualResult, typeof(OkObjectResult));
        }

        [TestMethod]
        public async Task Should_Verify_ValidateAvatarChildEpisode_For_NullParentID()
        {
            var inputJson = Get_Dummy_Json();
            var createdEpisodeId = Guid.NewGuid().ToString();
            var episodeParsed = inputJson.ToObject<Episode>();
            var dummyParentEpisode = new Episode
            {
                Id = "5f6287c08859500001e3f78b",
                Name = "EpisodicTestData",
                EquipmentWkeIdList = new List<string>(),
                ParentId = null,
                Type = "coring",
            };

            var parsedChannels = new ParsedChannels();
            ChannelIndexed ci0 = new ChannelIndexed() { Code = "time", Name = "time", Dimension = "time", Uom = "d" };
            ChannelIndexed ci1 = new ChannelIndexed() { Code = "DischargeRate", Name = "DischargeRate", Dimension = "ratio", Uom = "Unitless" };
            parsedChannels.Channels = new ChannelIndexed[2] { ci0, ci1 };

            _mockDataParser.Setup(x => x.ParseChannels(inputJson)).Returns(parsedChannels);

            _mockEpisodeService.Setup(s => s.GetEpisodeById("5f6287c08859500001e3f78b")).Returns(Task.FromResult(dummyParentEpisode));
            _mockEpisodeService.Setup(s => s.CreateEpisode(episodeParsed)).Returns(Task.FromResult(createdEpisodeId));

            var episodeController = GetEpisodesController();
            var actualResult = await episodeController.CreateEpisode(inputJson.ToObject<EpisodeRequest>());
            Assert.That.Should().NotBeNull();
        }

        [TestMethod]
        public async Task Should_Verify_ValidateAvatarChildEpisode_For_NullWkeId()
        {
            var inputJson = Get_Dummy_Json();
            var createdEpisodeId = Guid.NewGuid().ToString();
            var episodeParsed = inputJson.ToObject<Episode>();
            var dummyParentEpisode = new Episode
            {
                Id = "5f6287c08859500001e3f78b",
                Name = "EpisodicTestData",
                EquipmentWkeIdList = new List<string>(),
                ParentId = "87f234b29324",
                Type = "coring",
            };

            var parsedChannels = new ParsedChannels();
            ChannelIndexed ci0 = new ChannelIndexed() { Code = "time", Name = "time", Dimension = "time", Uom = "d" };
            ChannelIndexed ci1 = new ChannelIndexed() { Code = "DischargeRate", Name = "DischargeRate", Dimension = "ratio", Uom = "Unitless" };
            parsedChannels.Channels = new ChannelIndexed[2] { ci0, ci1 };

            _mockDataParser.Setup(x => x.ParseChannels(inputJson)).Returns(parsedChannels);

            _mockEpisodeService.Setup(s => s.GetEpisodeById("5f6287c08859500001e3f78b")).Returns(Task.FromResult(dummyParentEpisode));
            _mockEpisodeService.Setup(s => s.CreateEpisode(episodeParsed)).Returns(Task.FromResult(createdEpisodeId));

            var episodeController = GetEpisodesController();
            var actualResult = await episodeController.CreateEpisode(inputJson.ToObject<EpisodeRequest>());
            Assert.That.Should().NotBeNull();
        }

        [TestMethod]
        public async Task Should_Verify_ValidateAvatarChildEpisode_For_EmptyAvatarId()
        {
            var inputJson = Get_Dummy_Json();
            var createdEpisodeId = Guid.NewGuid().ToString();
            var episodeParsed = inputJson.ToObject<Episode>();
            var dummyEpisodeDataWithNoAvatarID = new Episode
            {
                Id = "5e2214cd8fc5500001132157",
                Name = "EpisodicTestDataWithEmptyWkeID",
                EquipmentWkeIdList = { "8234834:SPF7435345" },
                ParentId = "5e2214cd8fc",
                Tags = new List<string>()
                {
                    "avatar-run-id:8fh389g6hs",
                    "slb-correlation-id:73326016-6010-414e-b731-24e9913a9b45"
                }
            };

            var parsedChannels = new ParsedChannels();
            ChannelIndexed ci0 = new ChannelIndexed() { Code = "time", Name = "time", Dimension = "time", Uom = "d" };
            ChannelIndexed ci1 = new ChannelIndexed() { Code = "DischargeRate", Name = "DischargeRate", Dimension = "ratio", Uom = "Unitless" };
            parsedChannels.Channels = new ChannelIndexed[2] { ci0, ci1 };

            _mockDataParser.Setup(x => x.ParseChannels(inputJson)).Returns(parsedChannels);

            _mockEpisodeService.Setup(s => s.GetEpisodeById("5e2214cd8fc5500001132157")).Returns(Task.FromResult(dummyEpisodeDataWithNoAvatarID));
            _mockEpisodeService.Setup(s => s.CreateEpisode(episodeParsed)).Returns(Task.FromResult(createdEpisodeId));

            var episodeController = GetEpisodesController();
            var actualResult = await episodeController.CreateEpisode(inputJson.ToObject<EpisodeRequest>());
            Assert.That.Should().NotBeNull();
        }

        [TestMethod]
        public async Task Should_Verify_ValidateAvatarChildEpisode_For_EmptyAvatarRunId()
        {
            var inputJson = Get_Dummy_Json();
            var createdEpisodeId = Guid.NewGuid().ToString();
            var episodeParsed = inputJson.ToObject<Episode>();
            var dummyEpisodeDataWithNoAvatarRunId = new Episode
            {
                Id = "5e2214cd8fc5500001132157",
                Name = "EpisodicTest",
                EquipmentWkeIdList = { "8234834:SPF7435345" },
                ParentId = "5e2214cd8fc",
                Tags = new List<string>()
                {
                    "avatar-id:testAvatar",
                    "slb-correlation-id:73326016-6010-414e-b731-24e9913a9b45"
                }
            };

            var parsedChannels = new ParsedChannels();
            ChannelIndexed ci0 = new ChannelIndexed() { Code = "time", Name = "time", Dimension = "time", Uom = "d" };
            ChannelIndexed ci1 = new ChannelIndexed() { Code = "DischargeRate", Name = "DischargeRate", Dimension = "ratio", Uom = "Unitless" };
            parsedChannels.Channels = new ChannelIndexed[2] { ci0, ci1 };

            _mockDataParser.Setup(x => x.ParseChannels(inputJson)).Returns(parsedChannels);

            _mockEpisodeService.Setup(s => s.GetEpisodeById("5e2214cd8fc5500001132157")).Returns(Task.FromResult(dummyEpisodeDataWithNoAvatarRunId));
            _mockEpisodeService.Setup(s => s.CreateEpisode(episodeParsed)).Returns(Task.FromResult(createdEpisodeId));

            var episodeController = GetEpisodesController();
            var actualResult = await episodeController.CreateEpisode(inputJson.ToObject<EpisodeRequest>());
            Assert.That.Should().NotBeNull();
        }

        [TestMethod]
        public async Task Should_Verify_ValidateAvatarChildEpisode_For_EmptyCorrelationId()
        {
            var inputJson = Get_Dummy_Json();
            var createdEpisodeId = Guid.NewGuid().ToString();
            var episodeParsed = inputJson.ToObject<Episode>();
            var dummyEpisodeDataWithNoCorrelationId = new Episode
            {
                Id = "5e2214cd8fc5500001132157",
                Name = "EpisodicTest",
                EquipmentWkeIdList = { "8234834:SPF7435345" },
                ParentId = "5e2214cd8fc",
                Tags = new List<string>()
                {
                    "avatar-id:testAvatar",
                    "avatar-run-id:21312321"
                }
            };
            var parsedChannels = new ParsedChannels();
            ChannelIndexed ci0 = new ChannelIndexed() { Code = "time", Name = "time", Dimension = "time", Uom = "d" };
            ChannelIndexed ci1 = new ChannelIndexed() { Code = "DischargeRate", Name = "DischargeRate", Dimension = "ratio", Uom = "Unitless" };
            parsedChannels.Channels = new ChannelIndexed[2] { ci0, ci1 };

            _mockDataParser.Setup(x => x.ParseChannels(inputJson)).Returns(parsedChannels);

            _mockEpisodeService.Setup(s => s.GetEpisodeById("5e2214cd8fc5500001132157")).Returns(Task.FromResult(dummyEpisodeDataWithNoCorrelationId));
            _mockEpisodeService.Setup(s => s.CreateEpisode(episodeParsed)).Returns(Task.FromResult(createdEpisodeId));

            var episodeController = GetEpisodesController();
            var actualResult = await episodeController.CreateEpisode(inputJson.ToObject<EpisodeRequest>());
            Assert.That.Should().NotBeNull();
        }

        [TestMethod]
        public async Task Update_Episode_Returns_NoContent()
        {
            var episodeToUpdate = new EpisodeRequest()
            {
                Id = "5f6287c08859500001e3f98a",
                Name = "test",
                Tags = new List<string>(),
                EquipmentWkeIdList = new List<string>(),
                Relationships = new Dictionary<string, EpisodeRelationship>()
            };

            var episode = new Episode()
            {
                Id = "5f6287c08859500001e3f98a",
                Name = "test",
                Tags = new List<string>(),
                EquipmentWkeIdList = new List<string>(),
                Relationships = new Dictionary<string, EpisodeRelationship>()
            };
            _mockEpisodeService.Setup(s => s.GetEpisodeById("5f6287c08859500001e3f98a")).Returns(Task.FromResult(episode));
            var episodeController = GetEpisodesController();
            var updatedEpisode = await episodeController.UpdateEpisode("5f6287c08859500001e3f98a", episodeToUpdate);
            updatedEpisode.Should().NotBeNull();
            Assert.IsInstanceOfType(updatedEpisode, typeof(NoContentResult));
        }

        [TestMethod]
        public async Task Update_Episode_With_IdMismatch_ThrowsBadException()
        {
            var inputJson = Get_Dummy_Json();
            var episodeParsed = inputJson.ToObject<EpisodeRequest>();
            var episodeController = GetEpisodesController();
            var id = Guid.NewGuid().ToString();
            var updatedEpisode = await episodeController.UpdateEpisode(id, episodeParsed);
            updatedEpisode.Should().NotBeNull();
            Assert.IsInstanceOfType(updatedEpisode, typeof(BadRequestObjectResult));
        }

        [TestMethod]
        public async Task Delete_EpisodeId_Return_Ok()
        {

            var dummyEpisode = new Episode()
            {
                Id = "5f6287c08859500001e3f98a",
                Name = "test",
                Tags = new List<string>(),
                EquipmentWkeIdList = new List<string>(),
                Relationships = new Dictionary<string, EpisodeRelationship>()
            };

            _mockEpisodeService.Setup(s => s.GetEpisodeById("5f6287c08859500001e3f98a")).Returns(Task.FromResult(dummyEpisode));
            var episodeController = GetEpisodesController();
            var deleteEpisode = await episodeController.DeleteEpisode("5f6287c08859500001e3f98a");
            deleteEpisode.Should().NotBeNull();
            Assert.IsInstanceOfType(deleteEpisode, typeof(OkResult));
        }

        [TestMethod]

        public async Task Delete_Episode_With_EpisodicPoints_ThrowsBadRequestException()
        {
            var dummyEpisode = new Episode()
            {
                Id = "5f6287c08859500001e3f98a",
                Name = "test",
                Tags = new List<string>(),
                EquipmentWkeIdList = new List<string>() { "100447127:03009" },
                Relationships = new Dictionary<string, EpisodeRelationship>()
            };

            _mockEpisodeService.Setup(s => s.GetEpisodeById("5f6287c08859500001e3f98a")).Returns(Task.FromResult(dummyEpisode));
            _mockEpisodicPointService.Setup(s => s.AnyPointsExists("5f6287c08859500001e3f98a", "100447127:03009"))
                .Returns(Task.FromResult(true));
            var episodeController = GetEpisodesController();
            var deleteEpisode = await episodeController.DeleteEpisode("5f6287c08859500001e3f98a");
            deleteEpisode.Should().NotBeNull();
            Assert.IsInstanceOfType(deleteEpisode, typeof(BadRequestObjectResult));
        }

        [TestMethod]
        public void Get_EpisodicPoints_Returns_Ok()
        {
            EpisodeRows rows = new EpisodeRows();
            var episodeController = GetEpisodesController();
            _mockApiImplementation.Setup(x => x.GetEpisodeRows(It.IsAny<string>(), null, DataType.Episodic)).Returns(Task.FromResult(rows));

            var result = episodeController.GetEpisodicPoints("5f6287c08859500001e3f98a", It.IsAny<string>(), It.IsAny<string>());
            result.Result.Should().NotBeNull();
            Assert.IsInstanceOfType(result.Result, typeof(OkObjectResult));

        }

        [TestMethod]
        public void Get_Channels_Returns_Ok()
        {
            EpisodeRows rows = new EpisodeRows();
            var episodeController = GetEpisodesController();
            _mockApiImplementation.Setup(x => x.GetEpisodeRows(It.IsAny<string>(), null, DataType.Channel)).Returns(Task.FromResult(rows));
            var result = episodeController.GetChannels("5f6287c08859500001e3f98a");
            result.Result.Should().NotBeNull();
            Assert.IsInstanceOfType(result.Result, typeof(OkObjectResult));
        }



        private JToken Get_Dummy_Json()
        {
            return JToken.Parse(@"
{
  ""id"": null,
  ""name"": ""Avatar Coring 1"",
  ""startTime"": ""2020-01-15T17:06:21.810Z"",
  ""endTime"": ""2020-01-15T18:03:52.934Z"",
  ""type"": null,
  ""parentId"": ""5e2214cd8fc5500001132157"",
  ""tags"": [ 
""avatar-id:purina"",
    ""avatar-run-id:A61A9864-9302-491B-B146-64FDFA8DAD06"",
    ""slb-correlation-id:73326016-6010-414e-b731-24e9913a9b45""       
    ],
  ""equipmentwkeidlist"" : [ 
        ""100447127:03009""
    ],
  ""channels"": [
    {
      ""index"": 0,
      ""code"": ""time"",
      ""uom"": ""d"",
      ""dimension"": ""time""
    },
    {
      ""index"": 1,
      ""code"": ""eMOT"",
      ""uom"": ""h"",
      ""dimension"": ""period""
    }    
  ],
  ""data"": [
    {
      ""equipmentId"": ""H730200:152"",
      ""rows"": [
        [
          [ 0, ""2020-01-15T13:30:02.156Z"" ],
          [ 1, 0.11 ]
        ]
      ]
    }
  ]
}");
        }

        private JToken Get_Dummy_Json_ForCoringEpisodeType()
        {
            return JToken.Parse(@"
{
  ""id"": null,
  ""name"": ""Avatar Coring 1"",
  ""startTime"": ""2020-01-15T17:06:21.810Z"",
  ""endTime"": ""2020-01-15T18:03:52.934Z"",
  ""type"": ""coring"",
  ""parentId"": ""5e2214cd8fc5500001132157"",
  ""tags"": [ 
""avatar-id:purina"",
    ""avatar-run-id:A61A9864-9302-491B-B146-64FDFA8DAD06"",
    ""slb-correlation-id:73326016-6010-414e-b731-24e9913a9b45""       
    ],
  ""equipmentwkeidlist"" : [ 
        ""100447127:03009""
    ],
  ""channels"": [
    {
      ""index"": 0,
      ""code"": ""time"",
      ""uom"": ""d"",
      ""dimension"": ""time""
    },
    {
      ""index"": 1,
      ""code"": ""eMOT"",
      ""uom"": ""h"",
      ""dimension"": ""period""
    }    
  ],
  ""data"": [
    {
      ""equipmentId"": ""H730200:152"",
      ""rows"": [
        [
          [ 0, ""2020-01-15T13:30:02.156Z"" ],
          [ 1, 0.11 ]
        ]
      ]
    }
  ]
}");
        }

        protected EpisodesController GetEpisodesController()
        {
            return new EpisodesController
                (null, _mockmultiResourceGetter.Object, _mockSingleResourceGetter.Object, _mockApiImplementation.Object,
                _mockDataParser.Object, _mockDataMapper.Object, _mockEpisodeService.Object,
                _mockEpisodicPointService.Object, _mockEquipmentProvider.Object, _config
                );

        }


    }
}