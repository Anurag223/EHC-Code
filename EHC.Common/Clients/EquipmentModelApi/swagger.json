{
  "openapi": "3.0.1",
  "info": {
    "title": "Equipment Models",
    "description": "Equipment information that is NOT specific to an instance.<script type=\"text/javascript\">\r\n    function toggle(id) {\r\n        var e = document.getElementById(id);\r\n        e.style.display = (e.style.display === 'block') ? 'none' : 'block';\r\n    }\r\n</script><h4>Collection Support</h4>\r\n<p>\r\n    For APIs that return a collection of resources the following features are available. The case of the parameter names does not matter, however the case\r\n    of the parameters' values does matter.\r\n</p><h4 onclick=\"toggle('filtering')\">Filtering</h4>\r\n<div id=\"filtering\">\r\n    <p>\r\n        One ore more filters can be applied to one or more fields (see the documentation for a specific endpoint as to which fields are available. When multiple filters are applied to\r\n        a single field, they are effectively \"ORed'\". Filters for multiple fields are \"ANDed\". Field values are case-insensitive with respect to the comparison operator. While you can\r\n        search against any field of the resource, this is discouraged because not all fields are indexed. The indexed fields are listed in the documentation below. Queries against\r\n        non-indexed fields may be rate limited or prohibited in the future.\r\n    </p>\r\n    <h5>Separators</h5>\r\n    <p>\r\n        To correctly handle underlying data that may have special characters, the API can be made to use either the default separators or custom separators.\r\n    </p>\r\n    <ul>\r\n        <li>\r\n            The default separator between operands against the same field is a comma (,). For example: <strong>filter[code]=ABC,ne:DEF,eq:GHI</strong>. This can be changed by\r\n            including <strong>filterSep=<em>char</em></strong> in the query string.\r\n        </li>\r\n        <li>\r\n            The default separator between values for a multi-valued operator is a pipe (|). For example: <strong>filter[code]=in:ABC|DEF|GHI</strong>. This can be changed by\r\n            including <strong>valueSep=<em>char</em></strong> in the query string.\r\n        </li>\r\n    </ul>\r\n    <h5>Syntax</h5>\r\n    <p>\r\n        <strong>filter[<em>fieldName</em>]=<em>operator</em>:<em>value(s)</em></strong>. The operator and following colon, if omitted, is assumed to be <strong>equals</strong>. The following case-insensitive operators and their aliases, are supported\r\n        <ul>\r\n            <li>\r\n                <strong>\r\n                    <em>value</em>\r\n                </strong> - equal to the specified value (same as eq:value)\r\n            </li>\r\n            <li><strong>eq:<em>value</em></strong> - equal to the specified value. Aliases: <strong>eq</strong>, <strong>equal</strong></li>\r\n            <li><strong>ne:<em>value</em></strong> - not equal to the specified value. Aliases: <strong>notEqual</strong>, <strong>notEquals</strong></li>\r\n            <li><strong>gt:<em>value</em></strong> - greater than the specified value</li>\r\n            <li><strong>ge:<em>value</em></strong> - greater than or equal to the specified value. Aliases: <strong>gte</strong></li>\r\n            <li><strong>lt:<em>value</em></strong> - less than to the specified value. Aliases: <strong>lte</strong></li>\r\n            <li><strong>le:<em>value</em></strong> - less than or equal to the specified value</li>\r\n            <li><strong>between:<em>value</em>|<em>value2</em></strong> - inclusively between two values</li>\r\n            <li><strong>isNull</strong> - the field is null</li>\r\n            <li><strong>isNotNull</strong> - the field is not null</li>\r\n            <li><strong>in:<em>value1</em>|<em>value2</em>|<em>valueN</em></strong> - in a set of comma separated values</li>\r\n            <li><strong>ni:<em>value1</em>|<em>value2</em>|<em>valueN</em></strong> - not in a set of pipe separated values. Aliases: <strong>notIn</strong></li>\r\n            <li><strong>lk:<em>value</em></strong> - like the specified value (this is a <a href=\"https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions\">PCRE regex</a>). All expressions will be treated as case-insensitive and the beginning and trailing <strong>/</strong> or <strong>/i</strong> are not necessary. It is preferred that you anchor your expressions if possible (e.g. ^ABC) and query against indexed fields (usually those listed in the documentation below). Aliases: <strong>like</strong>, <strong>matches</strong></li>\r\n            <li><strong>c:<em>value</em></strong> - collection contains the specified value. Aliases: <strong>contains</strong></li>\r\n        </ul>\r\n    </p>\r\n    <h5>Examples</h5>\r\n    <p>\r\n        <ul>\r\n            <li><strong>?filter[modifiedDate]=gt:2019-04-01</strong> - only get resources modified after April 1, 2019</li>\r\n            <li><strong>?filter[parentId]=isnotnull</strong> - only get resources that have a parent</li>\r\n            <li><strong>?filter[owningSiteCode]=HOU&amp;filter[modifiedDate]=between:2019-03-01|2019-03-30</strong> - only get resources from HOU and modified in March 2019</li>\r\n            <li><strong>?filter[owningSiteCode]=eq:HOU&amp;filter[modifiedDate]gte:2019-03-01,lte:2019-03-30</strong> - same as the above</li>\r\n            <li><strong>?filter[owningSiteCode]=in:HOU|CCO|OKCTLM|OKC|MLD</strong> - only get resources owned by one of the 5 sites</li>\r\n            <li><strong>?filter[owningSiteCode]=ni:HOU|CCO|OKCTLM|OKC|MLD</strong> - only get resources not owned by any of the 5 sites</li>\r\n        </ul>\r\n        Filters can also be applied to nested objects including collections by \"dotting\" into the nested object(s). For example\r\n        <ul>\r\n            <li><strong>?filter[childWorkorders.plannedStartDate]=gt:2019-04-01</strong> - only workorders whose child workorders start after April 1, 2019</li>\r\n            <li><strong>?filter[equipment.workorders]=4500:Qtrac</strong> - only equipment with the specified workorder</li>\r\n        </ul>\r\n    </p>\r\n</div><h4>Sorting</h4>\r\nFields can be sorted. See the documentation for a specific model as to which fields are available. The field name is case-insensitive.\r\n<h5>Syntax</h5>\r\n<p>\r\n    <strong>sort=[-]<em>fieldName</em>[,[-]<em>fieldName2</em>[[-]<em>fieldName3</em>]]</strong> where a dash indicates a descending sort and lack of a dash indicates an ascending sort.\r\n</p>\r\n<h5>Examples</h5>\r\n<p>\r\n    <ul>\r\n        <li><strong>?sort=-modifiedDate</strong> - sort by modified date descending</li>\r\n        <li><strong>?sort=equipmentCode,-serialNumber</strong> - sort by equipment code ascending, serial number descending</li>\r\n    </ul>\r\n</p><h4>Paging</h4>\r\n<p>\r\n    Unless specifically noted collections will be paged. See the documentation for a specific API for the default page size and limit. The default page number is 1.\r\n    A page size must be 2 or greater even if the expected collection is likely to have only 1 item in it.\r\n</p>\r\n<h5>Syntax</h5>\r\n<p>\r\n    <strong>page[size]=<em>value</em></strong> where size is a positive integer greater than 1 and <strong>page[number]=<em>value</em></strong> where value is a positive integer\r\n</p>\r\n<h5>Example</h5>\r\n<p>\r\n    <ul>\r\n        <li>\r\n            <strong>?page[size]=100&amp;page[number]=10</strong>\r\n        </li>\r\n    </ul>\r\n</p><h4>Resource Inclusion (aka Includeables)</h4>\r\n<p>\r\n    By default, all includeables (sub-resources) are excluded from the root resource, however that resource may support the inclusion of sub-resources\r\n    if directed to. See the documentation for a specific API as to which resources can be included. The values of the 'include' parameter are case-insensitive.\r\n</p>\r\n<h5>Syntax</h5>\r\n<p>\r\n    <strong>?include=<em>fieldName</em>[,<em>fieldName2</em>[<em>fieldName3</em>]]</strong> where each includeable is separated by a comma by default.\r\n</p>\r\n<p>\r\n    To correctly handle underlying data that may have special characters, the API can be made to use\r\n    an alternate separator. To do this add <strong>includeSep=<em>char</em></strong> to the query string.\r\n</p>\r\n<h5>Example</h5>\r\n<p>\r\n    <ul>\r\n        <li><strong>?include=workorders,parent</strong> - include an equipment's workorders and parent</li>\r\n    </ul>\r\n</p>\r\n<h4>Sparse Field Sets</h4>\r\n<p>\r\n    By default, all fields except the includeables above are included. There are cases where a client may want to only include a few fields (what is known as\r\n    a sparse field set). All fields included explicitly means that all other fields are excluded implicitly. The values of the 'fields' parameter are case-insensitive.\r\n</p>\r\n<h5>Syntax</h5>\r\n<p>\r\n    <strong>?fields=<em>fieldName</em>[,<em>fieldName2</em>[<em>fieldName3</em>]]</strong> where each field is separated by a comma by default.\r\n</p>\r\n<p>\r\n    To correctly handle underlying data that may have special characters, the API can be made to use\r\n    an alternate separator. To do this add <strong>includeSep=<em>char</em></strong> to the query string.\r\n</p>\r\n<h5>Example</h5>\r\n<p>\r\n    <ul>\r\n        <li><strong>?fields=equipment,createdBy,updatedBy,description</strong> - include these 4 fields, and exclude all others</li>\r\n    </ul>\r\n</p>",
    "version": "v2"
  },
  "paths": {
    "/api/v2/equipment-models": {
      "get": {
        "tags": [
          "EquipmentModels"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Comma separate resources to include (all others will be excluded, and if blank, all will be excluded). Available resources: **attributes, channels, maintenanceActivityTypes, measurePoints, systemReferences, unmanagedAttributes**",
            "schema": {
              "type": "string",
              "description": "Comma separate resources to include (all others will be excluded, and if blank, all will be excluded). Available resources: **attributes, channels, maintenanceActivityTypes, measurePoints, systemReferences, unmanagedAttributes**",
              "format": ""
            },
            "examples": {
              "IncludeNothing": {
                "summary": "Include Nothing",
                "description": "Includes nothing in each equipment model",
                "value": ""
              },
              "IncludeEverything": {
                "summary": "Include Everything",
                "description": "Includes everything in each equipment model",
                "value": "attributes, channels, maintenanceActivityTypes, measurePoints, systemReferences, unmanagedAttributes"
              },
              "Includeattributes": {
                "summary": "Include attributes",
                "description": "Include attributes in each equipment model",
                "value": "attributes"
              },
              "Includechannels": {
                "summary": "Include channels",
                "description": "Include channels in each equipment model",
                "value": "channels"
              },
              "Includemaintenance-activity_types": {
                "summary": "Include maintenanceActivityTypes",
                "description": "Include maintenance activity types in each equipment model",
                "value": "maintenanceActivityTypes"
              },
              "Includemeasure-points": {
                "summary": "Include measurePoints",
                "description": "Include measure points in each equipment model",
                "value": "measurePoints"
              },
              "Includesystem-references": {
                "summary": "Include systemReferences",
                "description": "Include system references in each equipment model",
                "value": "systemReferences"
              },
              "Includeunmanaged-attributes": {
                "summary": "Include unmanagedAttributes",
                "description": "Include unmanaged attributes in each equipment model",
                "value": "unmanagedAttributes"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separate fields to include (all others will be excluded, and if blank, all will be included). Available fields are documented in the  model.",
            "schema": {
              "type": "string",
              "description": "Comma separate fields to include (all others will be excluded, and if blank, all will be included). Available fields are documented in the  model.",
              "format": ""
            }
          },
          {
            "name": "page[number]",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": "1"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": "25"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "-modifiedDate",
              "nullable": true
            }
          },
          {
            "name": "filter[equipmentCode]",
            "in": "query",
            "description": "Filter by <strong>equipment code</strong>. Separate multiple values with a comma.",
            "schema": {
              "type": "string",
              "description": "Filter by <strong>equipment code</strong>. Separate multiple values with a comma.",
              "format": ""
            }
          },
          {
            "name": "filter[revision]",
            "in": "query",
            "description": "Filter by <strong>revision</strong>. Separate multiple values with a comma.",
            "schema": {
              "type": "string",
              "description": "Filter by <strong>revision</strong>. Separate multiple values with a comma.",
              "format": ""
            }
          },
          {
            "name": "filter[description]",
            "in": "query",
            "description": "Filter by <strong>description</strong>. Separate multiple values with a comma.",
            "schema": {
              "type": "string",
              "description": "Filter by <strong>description</strong>. Separate multiple values with a comma.",
              "format": ""
            }
          },
          {
            "name": "filter[brandName]",
            "in": "query",
            "description": "Filter by <strong>brand name</strong>. Separate multiple values with a comma.",
            "schema": {
              "type": "string",
              "description": "Filter by <strong>brand name</strong>. Separate multiple values with a comma.",
              "format": ""
            }
          },
          {
            "name": "filter[brandCode]",
            "in": "query",
            "description": "Filter by <strong>brand code</strong>. Separate multiple values with a comma.",
            "schema": {
              "type": "string",
              "description": "Filter by <strong>brand code</strong>. Separate multiple values with a comma.",
              "format": ""
            }
          },
          {
            "name": "filter[technologyName]",
            "in": "query",
            "description": "Filter by <strong>technology name</strong>. Separate multiple values with a comma.",
            "schema": {
              "type": "string",
              "description": "Filter by <strong>technology name</strong>. Separate multiple values with a comma.",
              "format": ""
            }
          },
          {
            "name": "filter[technologyCode]",
            "in": "query",
            "description": "Filter by <strong>technology code</strong>. Separate multiple values with a comma.",
            "schema": {
              "type": "string",
              "description": "Filter by <strong>technology code</strong>. Separate multiple values with a comma.",
              "format": ""
            }
          },
          {
            "name": "filter[materialNumber]",
            "in": "query",
            "description": "Filter by <strong>material number</strong>. Separate multiple values with a comma.",
            "schema": {
              "type": "string",
              "description": "Filter by <strong>material number</strong>. Separate multiple values with a comma.",
              "format": ""
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorDocument"
                },
                "examples": {
                  "Duplicate-Filter": {
                    "summary": "Duplicate Filter",
                    "description": "A filter can be specified only once. However, you can separate operators within that filter; for example, filter[epicCode]=in:ABC,lk:ab.d",
                    "value": {
                      "Code": "DUPLICATEFILTER",
                      "Detail": "There must be only zero or one 'filter[epicCode]' specification in the query string. If you need to express multiple filters on the same field separate them with a comma, e.g. 'filter[x]=gt:1,lt:8'",
                      "Source": {
                        "Parameter": "filter[epicCode]"
                      },
                      "Status": "400",
                      "Title": "Duplicate Filter"
                    }
                  },
                  "Malformed-Filter_Parameter": {
                    "summary": "Malformed Filter Parameter",
                    "description": "Occurs whenever it appears there is a filter parameter, but some aspect of the syntax is incorrect",
                    "value": {
                      "Code": "MALFORMEDFILTERPARAMETER",
                      "Detail": "The filter specification 'filter[siteCode=HOU' is invalid",
                      "Source": {
                        "Parameter": "filter[siteCode"
                      },
                      "Status": "400",
                      "Title": "Malformed Filter Parameter"
                    }
                  },
                  "Paging-Not_Supported": {
                    "summary": "Paging Not Supported",
                    "description": "Not all endpoints support paging. This error occurs when a page has been requested of a non-paging endpoint.",
                    "value": {
                      "Code": "PAGINGNOTSUPPORTED",
                      "Detail": "This API does not support paging; remove page[number] from the query string",
                      "Source": {
                        "Parameter": "page[number]"
                      },
                      "Status": "400",
                      "Title": "Paging Not Supported"
                    }
                  },
                  "Duplicate-Page_Size.Parameter": {
                    "summary": "Duplicate Page Size Parameter",
                    "description": "Each paging parameter can only be specified once.",
                    "value": {
                      "Code": "DUPLICATEPAGESIZEPARAMETER",
                      "Detail": "There must be only zero or one 'page[number]' specification in the query string",
                      "Source": {
                        "Parameter": "page[number]"
                      },
                      "Status": "400",
                      "Title": "Duplicate Page Size Parameter"
                    }
                  },
                  "Invalid-Page_Size": {
                    "summary": "Invalid Page Size",
                    "description": "Page numbers must be integers",
                    "value": {
                      "Code": "INVALIDPAGESIZE",
                      "Detail": "The requested page size 5. is invalid",
                      "Source": {
                        "Parameter": "page[number]"
                      },
                      "Status": "400",
                      "Title": "Invalid Page Size"
                    }
                  },
                  "Invalid-Page_Number": {
                    "summary": "Invalid Page Number",
                    "description": "Page numbers must be positive",
                    "value": {
                      "Code": "INVALIDPAGENUMBER",
                      "Detail": "The requested page number is -1 which is less than one",
                      "Source": {
                        "Parameter": "page[number]"
                      },
                      "Status": "400",
                      "Title": "Invalid Page Number"
                    }
                  },
                  "Malformed-Page_Parameter": {
                    "summary": "Malformed Page Parameter",
                    "description": "A page specification is either page[size] or page[number] followed by a valid integer value",
                    "value": {
                      "Code": "MALFORMEDPAGEPARAMETER",
                      "Detail": "The paging specification 'pages[num=5' is invalid",
                      "Source": {
                        "Parameter": "pages[num"
                      },
                      "Status": "400",
                      "Title": "Malformed Page Parameter"
                    }
                  },
                  "Invalid-Value": {
                    "summary": "Invalid Value",
                    "description": "The page size must be at least 2",
                    "value": {
                      "Code": "INVALIDVALUE",
                      "Detail": "The page size must be at least 2",
                      "Source": {
                        "Parameter": "page[size]"
                      },
                      "Status": "400",
                      "Title": "Invalid Value"
                    }
                  },
                  "Duplicate-Sort": {
                    "summary": "Duplicate Sort",
                    "description": "There must be only zero or one sort specification in the query string; however, you may specify multiple fields to sort on",
                    "value": {
                      "Code": "DUPLICATESORT",
                      "Detail": "There must be only zero or one sort specification in the query string; however, you may specify multiple fields to sort on",
                      "Source": {
                        "Parameter": "sort"
                      },
                      "Status": "400",
                      "Title": "Duplicate Sort"
                    }
                  },
                  "Missing-Value": {
                    "summary": "Missing Value",
                    "description": "The 'include' parameter has no value",
                    "value": {
                      "Code": "MISSINGVALUE",
                      "Detail": "The 'include' parameter has no value",
                      "Source": {
                        "Parameter": "include"
                      },
                      "Status": "400",
                      "Title": "Missing Value"
                    }
                  },
                  "Malformed-Sort_Parameter": {
                    "summary": "Malformed Sort Parameter",
                    "description": "It appears like a sort was requested, but not using the 'sort' parameter or with an invalid field specification",
                    "value": {
                      "Code": "MALFORMEDSORTPARAMETER",
                      "Detail": "The sort specification 'sortOn=modifiedDate' is invalid",
                      "Source": {
                        "Parameter": "sortOn"
                      },
                      "Status": "400",
                      "Title": "Malformed Sort Parameter"
                    }
                  },
                  "Duplicate-Include_Parameter": {
                    "summary": "Duplicate Include Parameter",
                    "description": "The 'include' parameter was specified more than once",
                    "value": {
                      "Code": "DUPLICATEINCLUDEPARAMETER",
                      "Detail": "There must be only zero or one include specification in the query string",
                      "Source": {
                        "Parameter": "include"
                      },
                      "Status": "400",
                      "Title": "Duplicate Include Parameter"
                    }
                  }
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/equipmentModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "Root"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "EquipmentModels"
        ],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Comma separate resources to include (all others will be excluded, and if blank, all will be excluded). Available resources: **attributes, channels, maintenanceActivityTypes, measurePoints, systemReferences, unmanagedAttributes**",
            "schema": {
              "type": "string",
              "description": "Comma separate resources to include (all others will be excluded, and if blank, all will be excluded). Available resources: **attributes, channels, maintenanceActivityTypes, measurePoints, systemReferences, unmanagedAttributes**",
              "format": ""
            },
            "examples": {
              "IncludeNothing": {
                "summary": "Include Nothing",
                "description": "Includes nothing in the equipment model",
                "value": ""
              },
              "IncludeEverything": {
                "summary": "Include Everything",
                "description": "Includes everything in the equipment model",
                "value": "attributes, channels, maintenanceActivityTypes, measurePoints, systemReferences, unmanagedAttributes"
              },
              "Includeattributes": {
                "summary": "Include attributes",
                "description": "Include attributes in the equipment model",
                "value": "attributes"
              },
              "Includechannels": {
                "summary": "Include channels",
                "description": "Include channels in the equipment model",
                "value": "channels"
              },
              "Includemaintenance-activity_types": {
                "summary": "Include maintenanceActivityTypes",
                "description": "Include maintenance activity types in the equipment model",
                "value": "maintenanceActivityTypes"
              },
              "Includemeasure-points": {
                "summary": "Include measurePoints",
                "description": "Include measure points in the equipment model",
                "value": "measurePoints"
              },
              "Includesystem-references": {
                "summary": "Include systemReferences",
                "description": "Include system references in the equipment model",
                "value": "systemReferences"
              },
              "Includeunmanaged-attributes": {
                "summary": "Include unmanagedAttributes",
                "description": "Include unmanaged attributes in the equipment model",
                "value": "unmanagedAttributes"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separate fields to include (all others will be excluded, and if blank, all will be included). Available fields are documented in the equipmentModel  model.",
            "schema": {
              "type": "string",
              "description": "Comma separate fields to include (all others will be excluded, and if blank, all will be included). Available fields are documented in the equipmentModel  model.",
              "format": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorDocument"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/equipmentModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "Root"
            ]
          }
        ]
      }
    },
    "/api/v2/equipment-models/{equipmentCode}": {
      "get": {
        "tags": [
          "EquipmentModels"
        ],
        "parameters": [
          {
            "name": "equipmentCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Comma separate resources to include (all others will be excluded, and if blank, all will be excluded). Available resources: **attributes, channels, maintenanceActivityTypes, measurePoints, systemReferences, unmanagedAttributes**",
            "schema": {
              "type": "string",
              "description": "Comma separate resources to include (all others will be excluded, and if blank, all will be excluded). Available resources: **attributes, channels, maintenanceActivityTypes, measurePoints, systemReferences, unmanagedAttributes**",
              "format": ""
            },
            "examples": {
              "IncludeNothing": {
                "summary": "Include Nothing",
                "description": "Includes nothing in each equipment model",
                "value": ""
              },
              "IncludeEverything": {
                "summary": "Include Everything",
                "description": "Includes everything in each equipment model",
                "value": "attributes, channels, maintenanceActivityTypes, measurePoints, systemReferences, unmanagedAttributes"
              },
              "Includeattributes": {
                "summary": "Include attributes",
                "description": "Include attributes in each equipment model",
                "value": "attributes"
              },
              "Includechannels": {
                "summary": "Include channels",
                "description": "Include channels in each equipment model",
                "value": "channels"
              },
              "Includemaintenance-activity_types": {
                "summary": "Include maintenanceActivityTypes",
                "description": "Include maintenance activity types in each equipment model",
                "value": "maintenanceActivityTypes"
              },
              "Includemeasure-points": {
                "summary": "Include measurePoints",
                "description": "Include measure points in each equipment model",
                "value": "measurePoints"
              },
              "Includesystem-references": {
                "summary": "Include systemReferences",
                "description": "Include system references in each equipment model",
                "value": "systemReferences"
              },
              "Includeunmanaged-attributes": {
                "summary": "Include unmanagedAttributes",
                "description": "Include unmanaged attributes in each equipment model",
                "value": "unmanagedAttributes"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separate fields to include (all others will be excluded, and if blank, all will be included). Available fields are documented in the  model.",
            "schema": {
              "type": "string",
              "description": "Comma separate fields to include (all others will be excluded, and if blank, all will be included). Available fields are documented in the  model.",
              "format": ""
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorDocument"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorDocument"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/equipmentModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "Root"
            ]
          }
        ]
      }
    },
    "/api/v2/equipment-models/{equipmentCode}/channel-definitions": {
      "get": {
        "tags": [
          "EquipmentModels"
        ],
        "parameters": [
          {
            "name": "equipmentCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separate fields to include (all others will be excluded, and if blank, all will be included). Available fields are documented in the channelReferenceCollection  model.",
            "schema": {
              "type": "string",
              "description": "Comma separate fields to include (all others will be excluded, and if blank, all will be included). Available fields are documented in the channelReferenceCollection  model.",
              "format": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/channelReferenceCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "Root"
            ]
          }
        ]
      }
    },
    "/api/v2/equipment-models/{equipmentCode}/channel-definitions/{channelCode}": {
      "put": {
        "tags": [
          "EquipmentModels"
        ],
        "parameters": [
          {
            "name": "equipmentCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "channelCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "Root"
            ]
          }
        ]
      }
    },
    "/api/v2/equipment-models/{equipmentCode}/system-references": {
      "get": {
        "tags": [
          "EquipmentModels"
        ],
        "parameters": [
          {
            "name": "equipmentCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separate fields to include (all others will be excluded, and if blank, all will be included). Available fields are documented in the systemReferenceCollection  model.",
            "schema": {
              "type": "string",
              "description": "Comma separate fields to include (all others will be excluded, and if blank, all will be included). Available fields are documented in the systemReferenceCollection  model.",
              "format": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemReferenceCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "Root"
            ]
          }
        ]
      }
    },
    "/api/v2/equipment-models/{equipmentCode}/system-references/{systemId}": {
      "post": {
        "tags": [
          "EquipmentModels"
        ],
        "parameters": [
          {
            "name": "equipmentCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "systemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separate fields to include (all others will be excluded, and if blank, all will be included). Available fields are documented in the systemReferenceCollection  model.",
            "schema": {
              "type": "string",
              "description": "Comma separate fields to include (all others will be excluded, and if blank, all will be included). Available fields are documented in the systemReferenceCollection  model.",
              "format": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "string",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "string",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/systemReferenceCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "oauth2": [
              "Root"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "sortDirection": {
        "enum": [
          "Ascending",
          "Descending"
        ],
        "type": "string",
        "description": "<ul><li>0 - Ascending</li><li>1 - Descending</li></ul>",
        "example": "Ascending"
      },
      "operator": {
        "enum": [
          "Between",
          "Equals",
          "GreaterThan",
          "GreaterThanOrEqualTo",
          "LessThan",
          "LessThanOrEqualTo",
          "NotEqual",
          "IsNull",
          "IsNotNull",
          "In",
          "NotIn",
          "Set",
          "Like",
          "Contains",
          "Invalid"
        ],
        "type": "string",
        "description": "<ul><li>0 - between</li><li>1 - equals</li><li>2 - greaterthan - greater than</li><li>3 - greaterthanorequalto - greater than or equal to</li><li>4 - lessthan - less than</li><li>5 - lessthanorequalto - less than or equal to</li><li>6 - notequal - not equal</li><li>7 - is null</li><li>8 - is not null</li><li>9 - in</li><li>10 - notin - not in</li><li>11 - set</li><li>12 - like</li><li>13 - contains</li><li>14 - Invalid</li></ul>",
        "example": "between"
      },
      "queryExclusionPolicies": {
        "enum": [
          "None",
          "ExcludeFieldsInMemory",
          "ExcludeFieldsInRepo",
          "AlwaysIncludeFields",
          "ExcludeIncludeablesInMemory",
          "ExcludeIncludeablesInRepo",
          "AlwaysIncludeIncludeables",
          "ExcludeFieldsAndIncludeablesInRepo",
          "ExcludeFieldsAndIncludeablesInMemory",
          "ApplyExclusionsEverywhere"
        ],
        "type": "string",
        "description": "<ul><li>0 - None</li><li>1 - ExcludeFieldsInMemory</li><li>2 - ExcludeFieldsInRepo</li><li>4 - AlwaysIncludeFields</li><li>8 - ExcludeIncludeablesInMemory</li><li>9 - ExcludeFieldsAndIncludeablesInMemory</li><li>16 - ExcludeIncludeablesInRepo</li><li>18 - ExcludeFieldsAndIncludeablesInRepo</li><li>27 - ApplyExclusionsEverywhere</li><li>32 - AlwaysIncludeIncludeables</li></ul>",
        "example": "None"
      },
      "link": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "nullable": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true
          },
          "rel": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "links": {
        "type": "object",
        "properties": {
          "actualLinks": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/link"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "errorSource": {
        "type": "object",
        "properties": {
          "parameter": {
            "type": "string",
            "nullable": true
          },
          "pointer": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/links"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/errorSource"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "model": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "errorDocument": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error"
            },
            "nullable": true
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/model"
            },
            "nullable": true
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/link"
            },
            "nullable": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "channelReference": {
        "required": [
          "createdDate",
          "modifiedDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "dimension": {
            "type": "string",
            "nullable": true
          },
          "uom": {
            "type": "string",
            "nullable": true
          },
          "legalClassification": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "systemReference": {
        "required": [
          "createdDate",
          "modifiedDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "nullable": true
          },
          "systemId": {
            "type": "string",
            "nullable": true
          },
          "integrationId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "measureType": {
        "enum": [
          "ContinuousMeter",
          "GuageMeter",
          "Raw"
        ],
        "type": "string",
        "description": "<ul><li>1 - ContinuousMeter</li><li>2 - GuageMeter</li><li>3 - Raw</li></ul>",
        "example": "ContinuousMeter"
      },
      "readingType": {
        "enum": [
          "Actual",
          "Delta"
        ],
        "type": "string",
        "description": "<ul><li>1 - Actual</li><li>2 - Delta</li></ul>",
        "example": "Actual"
      },
      "systemOfEntry": {
        "required": [
          "isMandatory"
        ],
        "type": "object",
        "properties": {
          "systemId": {
            "type": "string",
            "nullable": true
          },
          "isMandatory": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "measurePoint": {
        "required": [
          "createdDate",
          "modifiedDate",
          "readingType",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "nullable": true
          },
          "measurePointRefId": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "dimension": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "uom": {
            "type": "string",
            "nullable": true
          },
          "legalClassification": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/measureType"
          },
          "readingType": {
            "$ref": "#/components/schemas/readingType"
          },
          "systemOfEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/systemOfEntry"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "maintenanceActivityTypeReference": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "attributeValue": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "dimension": {
            "type": "string",
            "nullable": true
          },
          "sequence": {
            "type": "string",
            "nullable": true
          },
          "uom": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "unmanagedAttributeValue": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "uom": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "equipmentModel": {
        "required": [
          "createdDate",
          "modifiedDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "nullable": true
          },
          "activeCmms": {
            "type": "string",
            "nullable": true
          },
          "sourceSystemRecordId": {
            "type": "string",
            "nullable": true
          },
          "equipmentCode": {
            "type": "string",
            "nullable": true
          },
          "revision": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "brandName": {
            "type": "string",
            "nullable": true
          },
          "brandCode": {
            "type": "string",
            "nullable": true
          },
          "technologyName": {
            "type": "string",
            "nullable": true
          },
          "technologyCode": {
            "type": "string",
            "nullable": true
          },
          "materialNumber": {
            "type": "string",
            "nullable": true
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/channelReference"
            },
            "nullable": true
          },
          "systemReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/systemReference"
            },
            "nullable": true
          },
          "measurePoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/measurePoint"
            },
            "nullable": true
          },
          "maintenanceActivityTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/maintenanceActivityTypeReference"
            },
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/attributeValue"
            },
            "nullable": true
          },
          "unmanagedAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/unmanagedAttributeValue"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "relationship": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": false,
            "nullable": true
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/link"
            },
            "nullable": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "modelOfChannelReference": {
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/channelReference"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/link"
            },
            "nullable": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true
          },
          "relationships": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/relationship"
            },
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "channelReferenceCollection": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/modelOfChannelReference"
            },
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error"
            },
            "nullable": true
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/model"
            },
            "nullable": true
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/link"
            },
            "nullable": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "modelOfSystemReference": {
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/systemReference"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/link"
            },
            "nullable": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true
          },
          "relationships": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/relationship"
            },
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "systemReferenceCollection": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/modelOfSystemReference"
            },
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error"
            },
            "nullable": true
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/model"
            },
            "nullable": true
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/link"
            },
            "nullable": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 authentication",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://auth.test.tlm.slb.com/connect/authorize",
            "tokenUrl": "https://auth.test.tlm.slb.com/connect/token",
            "scopes": {
              "equipmentmodelsapi": "equipmentmodelsapi"
            }
          }
        }
      }
    }
  }
}