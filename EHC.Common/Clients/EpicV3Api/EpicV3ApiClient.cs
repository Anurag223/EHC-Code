//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace TLM.EHC.Common.Clients.EpicV3Api
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IEpicV3ApiClient
    {
        /// <summary>Gets epic data by epic id. Example: group:RDG.</summary>
        /// <param name="include">Specify **attributes** to include them in the results.</param>
        /// <param name="filterincludeParent">Include the parent node in the EPIC hierarchy. Acceptable values: **true** or **false**</param>
        /// <param name="filterparentNodeLevel">Include the specified parent node level in the EPIC hierarchy</param>
        /// <param name="filterincludeChildren">Include child nodes in the EPIC hierarchy. Acceptable values: **true** or **false**</param>
        /// <param name="filterchildNodeLevel">Include the specified children node level in the EPIC hierarchy</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EpicRepresentationV3> EpicsAsync(string id, string include, bool? filterincludeParent, object filterparentNodeLevel, bool? filterincludeChildren, object filterchildNodeLevel);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets epic data by epic id. Example: group:RDG.</summary>
        /// <param name="include">Specify **attributes** to include them in the results.</param>
        /// <param name="filterincludeParent">Include the parent node in the EPIC hierarchy. Acceptable values: **true** or **false**</param>
        /// <param name="filterparentNodeLevel">Include the specified parent node level in the EPIC hierarchy</param>
        /// <param name="filterincludeChildren">Include child nodes in the EPIC hierarchy. Acceptable values: **true** or **false**</param>
        /// <param name="filterchildNodeLevel">Include the specified children node level in the EPIC hierarchy</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EpicRepresentationV3> EpicsAsync(string id, string include, bool? filterincludeParent, object filterparentNodeLevel, bool? filterincludeChildren, object filterchildNodeLevel, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets epic data.</summary>
        /// <param name="include">Specify **attributes** to include them in the results.</param>
        /// <param name="filterwkId">Filter by Epic wkid</param>
        /// <param name="filterincludeParent">Include the parent node in the EPIC hierarchy. Acceptable values: **true** or **false**</param>
        /// <param name="filterparentNodeLevel">Include the specified parent node level in the EPIC hierarchy</param>
        /// <param name="filterincludeChildren">Include child nodes in the EPIC hierarchy. Acceptable values: **true** or **false**</param>
        /// <param name="filterchildNodeLevel">Include the specified children node level in the EPIC hierarchy</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EpicRepresentationV3Collection> Epics2Async(string include, string filterwkId, bool? filterincludeParent, object filterparentNodeLevel, bool? filterincludeChildren, object filterchildNodeLevel);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets epic data.</summary>
        /// <param name="include">Specify **attributes** to include them in the results.</param>
        /// <param name="filterwkId">Filter by Epic wkid</param>
        /// <param name="filterincludeParent">Include the parent node in the EPIC hierarchy. Acceptable values: **true** or **false**</param>
        /// <param name="filterparentNodeLevel">Include the specified parent node level in the EPIC hierarchy</param>
        /// <param name="filterincludeChildren">Include child nodes in the EPIC hierarchy. Acceptable values: **true** or **false**</param>
        /// <param name="filterchildNodeLevel">Include the specified children node level in the EPIC hierarchy</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EpicRepresentationV3Collection> Epics2Async(string include, string filterwkId, bool? filterincludeParent, object filterparentNodeLevel, bool? filterincludeChildren, object filterchildNodeLevel, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="include">Comma separate resources to include (all others will be excluded, and if blank, all will be excluded). Available resources: **children.Children.ReferenceObject.Attribute, children.ReferenceObject.Attribute, referenceObject.Attribute**</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EpicV3>> EquipmenthierarchyAsync(string namedHierarchy, string include);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="include">Comma separate resources to include (all others will be excluded, and if blank, all will be excluded). Available resources: **children.Children.ReferenceObject.Attribute, children.ReferenceObject.Attribute, referenceObject.Attribute**</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EpicV3>> EquipmenthierarchyAsync(string namedHierarchy, string include, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class EpicV3ApiClient : IEpicV3ApiClient
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public EpicV3ApiClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <summary>Gets epic data by epic id. Example: group:RDG.</summary>
        /// <param name="include">Specify **attributes** to include them in the results.</param>
        /// <param name="filterincludeParent">Include the parent node in the EPIC hierarchy. Acceptable values: **true** or **false**</param>
        /// <param name="filterparentNodeLevel">Include the specified parent node level in the EPIC hierarchy</param>
        /// <param name="filterincludeChildren">Include child nodes in the EPIC hierarchy. Acceptable values: **true** or **false**</param>
        /// <param name="filterchildNodeLevel">Include the specified children node level in the EPIC hierarchy</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EpicRepresentationV3> EpicsAsync(string id, string include, bool? filterincludeParent, object filterparentNodeLevel, bool? filterincludeChildren, object filterchildNodeLevel)
        {
            return EpicsAsync(id, include, filterincludeParent, filterparentNodeLevel, filterincludeChildren, filterchildNodeLevel, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets epic data by epic id. Example: group:RDG.</summary>
        /// <param name="include">Specify **attributes** to include them in the results.</param>
        /// <param name="filterincludeParent">Include the parent node in the EPIC hierarchy. Acceptable values: **true** or **false**</param>
        /// <param name="filterparentNodeLevel">Include the specified parent node level in the EPIC hierarchy</param>
        /// <param name="filterincludeChildren">Include child nodes in the EPIC hierarchy. Acceptable values: **true** or **false**</param>
        /// <param name="filterchildNodeLevel">Include the specified children node level in the EPIC hierarchy</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EpicRepresentationV3> EpicsAsync(string id, string include, bool? filterincludeParent, object filterparentNodeLevel, bool? filterincludeChildren, object filterchildNodeLevel, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/masterdata/epics/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (include != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("include") + "=").Append(System.Uri.EscapeDataString(ConvertToString(include, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterincludeParent != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[includeParent]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterincludeParent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterparentNodeLevel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[parentNodeLevel]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterparentNodeLevel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterincludeChildren != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[includeChildren]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterincludeChildren, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterchildNodeLevel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[childNodeLevel]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterchildNodeLevel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDocument>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDocument>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EpicRepresentationV3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Gets epic data.</summary>
        /// <param name="include">Specify **attributes** to include them in the results.</param>
        /// <param name="filterwkId">Filter by Epic wkid</param>
        /// <param name="filterincludeParent">Include the parent node in the EPIC hierarchy. Acceptable values: **true** or **false**</param>
        /// <param name="filterparentNodeLevel">Include the specified parent node level in the EPIC hierarchy</param>
        /// <param name="filterincludeChildren">Include child nodes in the EPIC hierarchy. Acceptable values: **true** or **false**</param>
        /// <param name="filterchildNodeLevel">Include the specified children node level in the EPIC hierarchy</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EpicRepresentationV3Collection> Epics2Async(string include, string filterwkId, bool? filterincludeParent, object filterparentNodeLevel, bool? filterincludeChildren, object filterchildNodeLevel)
        {
            return Epics2Async(include, filterwkId, filterincludeParent, filterparentNodeLevel, filterincludeChildren, filterchildNodeLevel, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets epic data.</summary>
        /// <param name="include">Specify **attributes** to include them in the results.</param>
        /// <param name="filterwkId">Filter by Epic wkid</param>
        /// <param name="filterincludeParent">Include the parent node in the EPIC hierarchy. Acceptable values: **true** or **false**</param>
        /// <param name="filterparentNodeLevel">Include the specified parent node level in the EPIC hierarchy</param>
        /// <param name="filterincludeChildren">Include child nodes in the EPIC hierarchy. Acceptable values: **true** or **false**</param>
        /// <param name="filterchildNodeLevel">Include the specified children node level in the EPIC hierarchy</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EpicRepresentationV3Collection> Epics2Async(string include, string filterwkId, bool? filterincludeParent, object filterparentNodeLevel, bool? filterincludeChildren, object filterchildNodeLevel, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/masterdata/epics?");
            if (include != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("include") + "=").Append(System.Uri.EscapeDataString(ConvertToString(include, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterwkId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[wkId]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterwkId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterincludeParent != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[includeParent]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterincludeParent, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterparentNodeLevel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[parentNodeLevel]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterparentNodeLevel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterincludeChildren != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[includeChildren]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterincludeChildren, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterchildNodeLevel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[childNodeLevel]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterchildNodeLevel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDocument>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Acceptable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EpicRepresentationV3Collection>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <param name="include">Comma separate resources to include (all others will be excluded, and if blank, all will be excluded). Available resources: **children.Children.ReferenceObject.Attribute, children.ReferenceObject.Attribute, referenceObject.Attribute**</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EpicV3>> EquipmenthierarchyAsync(string namedHierarchy, string include)
        {
            return EquipmenthierarchyAsync(namedHierarchy, include, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="include">Comma separate resources to include (all others will be excluded, and if blank, all will be excluded). Available resources: **children.Children.ReferenceObject.Attribute, children.ReferenceObject.Attribute, referenceObject.Attribute**</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EpicV3>> EquipmenthierarchyAsync(string namedHierarchy, string include, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v3/equipmenthierarchy/{namedHierarchy}?");
            urlBuilder_.Replace("{namedHierarchy}", System.Uri.EscapeDataString(ConvertToString(namedHierarchy, System.Globalization.CultureInfo.InvariantCulture)));
            if (include != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("include") + "=").Append(System.Uri.EscapeDataString(ConvertToString(include, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDocument>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Acceptable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EpicV3>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>&lt;ul&gt;&lt;li&gt;0 - Ascending&lt;/li&gt;&lt;li&gt;1 - Descending&lt;/li&gt;&lt;/ul&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortDirection
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ascending")]
        Ascending = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Descending")]
        Descending = 1,
    
    }
    
    /// <summary>&lt;ul&gt;&lt;li&gt;0 - between&lt;/li&gt;&lt;li&gt;1 - equals&lt;/li&gt;&lt;li&gt;2 - greaterthan - greater than&lt;/li&gt;&lt;li&gt;3 - greaterthanorequalto - greater than or equal to&lt;/li&gt;&lt;li&gt;4 - lessthan - less than&lt;/li&gt;&lt;li&gt;5 - lessthanorequalto - less than or equal to&lt;/li&gt;&lt;li&gt;6 - notequal - not equal&lt;/li&gt;&lt;li&gt;7 - is null&lt;/li&gt;&lt;li&gt;8 - is not null&lt;/li&gt;&lt;li&gt;9 - in&lt;/li&gt;&lt;li&gt;10 - notin - not in&lt;/li&gt;&lt;li&gt;11 - set&lt;/li&gt;&lt;li&gt;12 - like&lt;/li&gt;&lt;li&gt;13 - contains&lt;/li&gt;&lt;li&gt;14 - Invalid&lt;/li&gt;&lt;/ul&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Operator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Between")]
        Between = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Equals")]
        Equals = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GreaterThan")]
        GreaterThan = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GreaterThanOrEqualTo")]
        GreaterThanOrEqualTo = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LessThan")]
        LessThan = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LessThanOrEqualTo")]
        LessThanOrEqualTo = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotEqual")]
        NotEqual = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IsNull")]
        IsNull = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IsNotNull")]
        IsNotNull = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"In")]
        In = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotIn")]
        NotIn = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Set")]
        Set = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Like")]
        Like = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Contains")]
        Contains = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Invalid")]
        Invalid = 14,
    
    }
    
    /// <summary>&lt;ul&gt;&lt;li&gt;0 - None&lt;/li&gt;&lt;li&gt;1 - ExcludeFieldsInMemory&lt;/li&gt;&lt;li&gt;2 - ExcludeFieldsInRepo&lt;/li&gt;&lt;li&gt;4 - AlwaysIncludeFields&lt;/li&gt;&lt;li&gt;8 - ExcludeIncludeablesInMemory&lt;/li&gt;&lt;li&gt;9 - ExcludeFieldsAndIncludeablesInMemory&lt;/li&gt;&lt;li&gt;16 - ExcludeIncludeablesInRepo&lt;/li&gt;&lt;li&gt;18 - ExcludeFieldsAndIncludeablesInRepo&lt;/li&gt;&lt;li&gt;27 - ApplyExclusionsEverywhere&lt;/li&gt;&lt;li&gt;32 - AlwaysIncludeIncludeables&lt;/li&gt;&lt;/ul&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum QueryExclusionPolicies
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExcludeFieldsInMemory")]
        ExcludeFieldsInMemory = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExcludeFieldsInRepo")]
        ExcludeFieldsInRepo = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AlwaysIncludeFields")]
        AlwaysIncludeFields = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExcludeIncludeablesInMemory")]
        ExcludeIncludeablesInMemory = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExcludeFieldsAndIncludeablesInMemory")]
        ExcludeFieldsAndIncludeablesInMemory = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExcludeIncludeablesInRepo")]
        ExcludeIncludeablesInRepo = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExcludeFieldsAndIncludeablesInRepo")]
        ExcludeFieldsAndIncludeablesInRepo = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ApplyExclusionsEverywhere")]
        ApplyExclusionsEverywhere = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AlwaysIncludeIncludeables")]
        AlwaysIncludeIncludeables = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Link 
    {
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }
    
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Links 
    {
        [Newtonsoft.Json.JsonProperty("actualLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Link> ActualLinks { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorSource 
    {
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pointer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pointer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Error 
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }
    
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorSource Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Model 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorDocument 
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error> Errors { get; set; }
    
        [Newtonsoft.Json.JsonProperty("included", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Model> Included { get; set; }
    
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Link> Links { get; set; }
    
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Meta { get; set; }
    
    
    }
    
    /// <summary>&lt;ul&gt;&lt;li&gt;1 - Division&lt;/li&gt;&lt;li&gt;2 - BusinessLine&lt;/li&gt;&lt;li&gt;3 - SubBusinessLine&lt;/li&gt;&lt;li&gt;4 - ProductFamily&lt;/li&gt;&lt;li&gt;5 - Technology&lt;/li&gt;&lt;li&gt;6 - Brand&lt;/li&gt;&lt;li&gt;7 - EquipmentSystem&lt;/li&gt;&lt;li&gt;8 - EquipmentToolset&lt;/li&gt;&lt;li&gt;9 - Attribute&lt;/li&gt;&lt;li&gt;10 - EquipmentPRT&lt;/li&gt;&lt;li&gt;11 - ChemicalSystem&lt;/li&gt;&lt;li&gt;12 - EquipmentSubsystem&lt;/li&gt;&lt;li&gt;13 - Filecode&lt;/li&gt;&lt;li&gt;14 - SurfaceEquipment&lt;/li&gt;&lt;/ul&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum EquipmentClassificationTypeV3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Division")]
        Division = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BusinessLine")]
        BusinessLine = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SubBusinessLine")]
        SubBusinessLine = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ProductFamily")]
        ProductFamily = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Technology")]
        Technology = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Brand")]
        Brand = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EquipmentSystem")]
        EquipmentSystem = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EquipmentToolset")]
        EquipmentToolset = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Attribute")]
        Attribute = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EquipmentPRT")]
        EquipmentPRT = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ChemicalSystem")]
        ChemicalSystem = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EquipmentSubsystem")]
        EquipmentSubsystem = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Filecode")]
        Filecode = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SurfaceEquipment")]
        SurfaceEquipment = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AttributeValue 
    {
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dimension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dimension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sequence { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EpicRepresentationV3 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ModifiedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedBy { get; set; }
    
        /// <summary>A code used to uniquely identify the EPIC.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>The name of the EPIC.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>A code used to uniquely identify the parent EPIC. This will be null if the subject EPIC is at the Group level.</summary>
        [Newtonsoft.Json.JsonProperty("parentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EquipmentClassificationTypeV3 Type { get; set; }
    
        /// <summary>The children at the immediate level below this EPIC.</summary>
        [Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EpicRepresentationV3> Children { get; set; }
    
        /// <summary>Equipment System Attributes</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttributeValue> Attributes { get; set; }
    
    
    }
    
    /// <summary>A machine-readable format for specifying errors in HTTP API responses based on https://tools.ietf.org/html/rfc7807.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProblemDetails 
    {
        /// <summary>A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be 'about: blank'.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>A short, human-readable summary of the problem type. It will generally not change from occurrence to occurrence of the problem.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }
    
        /// <summary>A human-readable explanation specific to this occurrence of the problem</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        /// <summary>URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.</summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }
    
        /// <summary>Any extensions that the API may provide</summary>
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionMeta 
    {
        [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalCount { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EpicRepresentationV3Collection 
    {
        [Newtonsoft.Json.JsonProperty("collection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EpicRepresentationV3> Collection { get; set; }
    
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Link> Links { get; set; }
    
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CollectionMeta Meta { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReferenceObject 
    {
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Level { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        [Newtonsoft.Json.JsonProperty("wkId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WkId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("attribute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Attribute { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EpicV3 
    {
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ModifiedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EquipmentClassificationTypeV3 Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceObject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReferenceObject ReferenceObject { get; set; }
    
        [Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EpicV3> Children { get; set; }
    
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108