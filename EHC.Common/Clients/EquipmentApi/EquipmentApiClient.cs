//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace TLM.EHC.Common.Clients.EquipmentApi
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IEquipmentApiClient
    {
        /// <summary>Gets the equipment matching the specified criteria</summary>
        /// <param name="include">Specify the resources to include by comma separating them from any of these: **alternateIdentities, attributes, childEquipment, classifications, comments, equipmentDemandSummary, futureMaintenanceCalls, measurementPoints, movementSummary, pairedEquipment, parentEquipment, unmanagedAttributes, workorders**</param>
        /// <param name="filtercontrolSiteCode">Filter by &lt;strong&gt;control site code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtercontrolSiteId">Filter by &lt;strong&gt;control site id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentCode">Filter by &lt;strong&gt;equipment code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentState">Filter by &lt;strong&gt;equipment state&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentType">Filter by &lt;strong&gt;equipment type&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtermanufacturerSerialNumber">Filter by &lt;strong&gt;manufacturer serial number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtermaterialNumber">Filter by &lt;strong&gt;material number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterownerSiteCode">Filter by &lt;strong&gt;owner site code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterownerSiteId">Filter by &lt;strong&gt;owner site id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterpairedEquipmentId">Filter by &lt;strong&gt;paired equipment id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterparentEquipmentId">Filter by &lt;strong&gt;parent equipment id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterserialNumber">Filter by &lt;strong&gt;serial number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterwellKnownEntityId">Filter by &lt;strong&gt;well known entity id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterepicCode">Filter equipment based on the **EPIC code**</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EquipmentCollection> EquipmentAsync(string include, int pagenumber, int pagesize, string sort, string filtercontrolSiteCode, string filtercontrolSiteId, string filterequipmentCode, string filterequipmentState, string filterequipmentType, string filtermanufacturerSerialNumber, string filtermaterialNumber, string filterownerSiteCode, string filterownerSiteId, string filterpairedEquipmentId, string filterparentEquipmentId, string filterserialNumber, string filterwellKnownEntityId, string filterepicCode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the equipment matching the specified criteria</summary>
        /// <param name="include">Specify the resources to include by comma separating them from any of these: **alternateIdentities, attributes, childEquipment, classifications, comments, equipmentDemandSummary, futureMaintenanceCalls, measurementPoints, movementSummary, pairedEquipment, parentEquipment, unmanagedAttributes, workorders**</param>
        /// <param name="filtercontrolSiteCode">Filter by &lt;strong&gt;control site code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtercontrolSiteId">Filter by &lt;strong&gt;control site id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentCode">Filter by &lt;strong&gt;equipment code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentState">Filter by &lt;strong&gt;equipment state&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentType">Filter by &lt;strong&gt;equipment type&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtermanufacturerSerialNumber">Filter by &lt;strong&gt;manufacturer serial number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtermaterialNumber">Filter by &lt;strong&gt;material number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterownerSiteCode">Filter by &lt;strong&gt;owner site code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterownerSiteId">Filter by &lt;strong&gt;owner site id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterpairedEquipmentId">Filter by &lt;strong&gt;paired equipment id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterparentEquipmentId">Filter by &lt;strong&gt;parent equipment id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterserialNumber">Filter by &lt;strong&gt;serial number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterwellKnownEntityId">Filter by &lt;strong&gt;well known entity id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterepicCode">Filter equipment based on the **EPIC code**</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EquipmentCollection> EquipmentAsync(string include, int pagenumber, int pagesize, string sort, string filtercontrolSiteCode, string filtercontrolSiteId, string filterequipmentCode, string filterequipmentState, string filterequipmentType, string filtermanufacturerSerialNumber, string filtermaterialNumber, string filterownerSiteCode, string filterownerSiteId, string filterpairedEquipmentId, string filterparentEquipmentId, string filterserialNumber, string filterwellKnownEntityId, string filterepicCode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates new Workorder</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Equipment2Async(EquipmentShellRequest body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates new Workorder</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Equipment2Async(EquipmentShellRequest body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the equipment with the specified ID.</summary>
        /// <param name="id">The equipment's identifier.</param>
        /// <param name="include">Specify the resources to include by comma separating them from any of these: **alternateIdentities, attributes, childEquipment, classifications, comments, equipmentDemandSummary, futureMaintenanceCalls, measurementPoints, movementSummary, pairedEquipment, parentEquipment, unmanagedAttributes, workorders**</param>
        /// <param name="filtercontrolSiteCode">Filter by &lt;strong&gt;control site code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtercontrolSiteId">Filter by &lt;strong&gt;control site id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentCode">Filter by &lt;strong&gt;equipment code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentState">Filter by &lt;strong&gt;equipment state&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentType">Filter by &lt;strong&gt;equipment type&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtermanufacturerSerialNumber">Filter by &lt;strong&gt;manufacturer serial number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtermaterialNumber">Filter by &lt;strong&gt;material number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterownerSiteCode">Filter by &lt;strong&gt;owner site code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterownerSiteId">Filter by &lt;strong&gt;owner site id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterpairedEquipmentId">Filter by &lt;strong&gt;paired equipment id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterparentEquipmentId">Filter by &lt;strong&gt;parent equipment id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterserialNumber">Filter by &lt;strong&gt;serial number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterwellKnownEntityId">Filter by &lt;strong&gt;well known entity id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <returns>The equipment with the specified ID</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Equipment> Equipment3Async(string id, string include, string filtercontrolSiteCode, string filtercontrolSiteId, string filterequipmentCode, string filterequipmentState, string filterequipmentType, string filtermanufacturerSerialNumber, string filtermaterialNumber, string filterownerSiteCode, string filterownerSiteId, string filterpairedEquipmentId, string filterparentEquipmentId, string filterserialNumber, string filterwellKnownEntityId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the equipment with the specified ID.</summary>
        /// <param name="id">The equipment's identifier.</param>
        /// <param name="include">Specify the resources to include by comma separating them from any of these: **alternateIdentities, attributes, childEquipment, classifications, comments, equipmentDemandSummary, futureMaintenanceCalls, measurementPoints, movementSummary, pairedEquipment, parentEquipment, unmanagedAttributes, workorders**</param>
        /// <param name="filtercontrolSiteCode">Filter by &lt;strong&gt;control site code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtercontrolSiteId">Filter by &lt;strong&gt;control site id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentCode">Filter by &lt;strong&gt;equipment code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentState">Filter by &lt;strong&gt;equipment state&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentType">Filter by &lt;strong&gt;equipment type&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtermanufacturerSerialNumber">Filter by &lt;strong&gt;manufacturer serial number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtermaterialNumber">Filter by &lt;strong&gt;material number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterownerSiteCode">Filter by &lt;strong&gt;owner site code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterownerSiteId">Filter by &lt;strong&gt;owner site id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterpairedEquipmentId">Filter by &lt;strong&gt;paired equipment id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterparentEquipmentId">Filter by &lt;strong&gt;parent equipment id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterserialNumber">Filter by &lt;strong&gt;serial number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterwellKnownEntityId">Filter by &lt;strong&gt;well known entity id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <returns>The equipment with the specified ID</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Equipment> Equipment3Async(string id, string include, string filtercontrolSiteCode, string filtercontrolSiteId, string filterequipmentCode, string filterequipmentState, string filterequipmentType, string filtermanufacturerSerialNumber, string filtermaterialNumber, string filterownerSiteCode, string filterownerSiteId, string filterpairedEquipmentId, string filterparentEquipmentId, string filterserialNumber, string filterwellKnownEntityId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the workorders associated with the specified equipment.</summary>
        /// <param name="id">The equipment's identifier.</param>
        /// <param name="include">Specify the resources to include by comma separating them from any of these: **attributes, unmanagedAttributes**</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkorderReferenceCollection> WorkordersAsync(string id, string include);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the workorders associated with the specified equipment.</summary>
        /// <param name="id">The equipment's identifier.</param>
        /// <param name="include">Specify the resources to include by comma separating them from any of these: **attributes, unmanagedAttributes**</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkorderReferenceCollection> WorkordersAsync(string id, string include, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the EquipmentModel with the specified equipmentcode.</summary>
        /// <param name="equipmentcode">The equipmentcode.</param>
        /// <returns>The EquipmentModel with the specified equipmentcode</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EquipmentModel> SbomAsync(string equipmentcode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the EquipmentModel with the specified equipmentcode.</summary>
        /// <param name="equipmentcode">The equipmentcode.</param>
        /// <returns>The EquipmentModel with the specified equipmentcode</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EquipmentModel> SbomAsync(string equipmentcode, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the Strategy with the specified EquipmentCode, MaintenanceActivityTypeCode and Level.</summary>
        /// <param name="equipmentcode">The equipmentcode.</param>
        /// <param name="maintenanceactivitytypecode">MaintenanceActivityTypeCode</param>
        /// <param name="level">MaintenanceActivityTypeLevel</param>
        /// <returns>The MaintenanceStrategy with the specified EquipmentCode, MaintenanceActivityTypeCode and Level</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EquipmentModel> LevelAsync(string equipmentcode, string maintenanceactivitytypecode, string level);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the Strategy with the specified EquipmentCode, MaintenanceActivityTypeCode and Level.</summary>
        /// <param name="equipmentcode">The equipmentcode.</param>
        /// <param name="maintenanceactivitytypecode">MaintenanceActivityTypeCode</param>
        /// <param name="level">MaintenanceActivityTypeLevel</param>
        /// <returns>The MaintenanceStrategy with the specified EquipmentCode, MaintenanceActivityTypeCode and Level</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EquipmentModel> LevelAsync(string equipmentcode, string maintenanceactivitytypecode, string level, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get the ToolSetTemplates using the specified query parameters.</summary>
        /// <returns>The ToolSetTemplate with the specified query</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ToolSetTemplate> ToolsettemplatesAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the ToolSetTemplates using the specified query parameters.</summary>
        /// <returns>The ToolSetTemplate with the specified query</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ToolSetTemplate> ToolsettemplatesAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the ToolSetTemplates with the specified equipmentcode.</summary>
        /// <param name="equipmentcode">The equipmentcode.</param>
        /// <returns>The ToolSetTemplate with the specified equipmentcode</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ToolSetTemplateCollection> Toolsettemplates2Async(string equipmentcode);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the ToolSetTemplates with the specified equipmentcode.</summary>
        /// <param name="equipmentcode">The equipmentcode.</param>
        /// <returns>The ToolSetTemplate with the specified equipmentcode</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ToolSetTemplateCollection> Toolsettemplates2Async(string equipmentcode, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class EquipmentApiClient : IEquipmentApiClient
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public EquipmentApiClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
    
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <summary>Gets the equipment matching the specified criteria</summary>
        /// <param name="include">Specify the resources to include by comma separating them from any of these: **alternateIdentities, attributes, childEquipment, classifications, comments, equipmentDemandSummary, futureMaintenanceCalls, measurementPoints, movementSummary, pairedEquipment, parentEquipment, unmanagedAttributes, workorders**</param>
        /// <param name="filtercontrolSiteCode">Filter by &lt;strong&gt;control site code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtercontrolSiteId">Filter by &lt;strong&gt;control site id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentCode">Filter by &lt;strong&gt;equipment code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentState">Filter by &lt;strong&gt;equipment state&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentType">Filter by &lt;strong&gt;equipment type&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtermanufacturerSerialNumber">Filter by &lt;strong&gt;manufacturer serial number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtermaterialNumber">Filter by &lt;strong&gt;material number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterownerSiteCode">Filter by &lt;strong&gt;owner site code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterownerSiteId">Filter by &lt;strong&gt;owner site id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterpairedEquipmentId">Filter by &lt;strong&gt;paired equipment id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterparentEquipmentId">Filter by &lt;strong&gt;parent equipment id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterserialNumber">Filter by &lt;strong&gt;serial number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterwellKnownEntityId">Filter by &lt;strong&gt;well known entity id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterepicCode">Filter equipment based on the **EPIC code**</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EquipmentCollection> EquipmentAsync(string include, int pagenumber, int pagesize, string sort, string filtercontrolSiteCode, string filtercontrolSiteId, string filterequipmentCode, string filterequipmentState, string filterequipmentType, string filtermanufacturerSerialNumber, string filtermaterialNumber, string filterownerSiteCode, string filterownerSiteId, string filterpairedEquipmentId, string filterparentEquipmentId, string filterserialNumber, string filterwellKnownEntityId, string filterepicCode)
        {
            return EquipmentAsync(include, pagenumber, pagesize, sort, filtercontrolSiteCode, filtercontrolSiteId, filterequipmentCode, filterequipmentState, filterequipmentType, filtermanufacturerSerialNumber, filtermaterialNumber, filterownerSiteCode, filterownerSiteId, filterpairedEquipmentId, filterparentEquipmentId, filterserialNumber, filterwellKnownEntityId, filterepicCode, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the equipment matching the specified criteria</summary>
        /// <param name="include">Specify the resources to include by comma separating them from any of these: **alternateIdentities, attributes, childEquipment, classifications, comments, equipmentDemandSummary, futureMaintenanceCalls, measurementPoints, movementSummary, pairedEquipment, parentEquipment, unmanagedAttributes, workorders**</param>
        /// <param name="filtercontrolSiteCode">Filter by &lt;strong&gt;control site code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtercontrolSiteId">Filter by &lt;strong&gt;control site id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentCode">Filter by &lt;strong&gt;equipment code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentState">Filter by &lt;strong&gt;equipment state&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentType">Filter by &lt;strong&gt;equipment type&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtermanufacturerSerialNumber">Filter by &lt;strong&gt;manufacturer serial number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtermaterialNumber">Filter by &lt;strong&gt;material number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterownerSiteCode">Filter by &lt;strong&gt;owner site code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterownerSiteId">Filter by &lt;strong&gt;owner site id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterpairedEquipmentId">Filter by &lt;strong&gt;paired equipment id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterparentEquipmentId">Filter by &lt;strong&gt;parent equipment id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterserialNumber">Filter by &lt;strong&gt;serial number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterwellKnownEntityId">Filter by &lt;strong&gt;well known entity id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterepicCode">Filter equipment based on the **EPIC code**</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EquipmentCollection> EquipmentAsync(string include, int pagenumber, int pagesize, string sort, string filtercontrolSiteCode, string filtercontrolSiteId, string filterequipmentCode, string filterequipmentState, string filterequipmentType, string filtermanufacturerSerialNumber, string filtermaterialNumber, string filterownerSiteCode, string filterownerSiteId, string filterpairedEquipmentId, string filterparentEquipmentId, string filterserialNumber, string filterwellKnownEntityId, string filterepicCode, System.Threading.CancellationToken cancellationToken)
        {
            if (pagenumber == null)
                throw new System.ArgumentNullException("pagenumber");
    
            if (pagesize == null)
                throw new System.ArgumentNullException("pagesize");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v2/equipment?");
            if (include != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("include") + "=").Append(System.Uri.EscapeDataString(ConvertToString(include, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Append(System.Uri.EscapeDataString("page[number]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagenumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("page[size]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pagesize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sort != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filtercontrolSiteCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[controlSiteCode]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filtercontrolSiteCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filtercontrolSiteId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[controlSiteId]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filtercontrolSiteId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterequipmentCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[equipmentCode]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterequipmentCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterequipmentState != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[equipmentState]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterequipmentState, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterequipmentType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[equipmentType]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterequipmentType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filtermanufacturerSerialNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[manufacturerSerialNumber]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filtermanufacturerSerialNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filtermaterialNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[materialNumber]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filtermaterialNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterownerSiteCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[ownerSiteCode]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterownerSiteCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterownerSiteId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[ownerSiteId]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterownerSiteId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterpairedEquipmentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[pairedEquipmentId]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterpairedEquipmentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterparentEquipmentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[parentEquipmentId]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterparentEquipmentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterserialNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[serialNumber]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterserialNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterwellKnownEntityId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[wellKnownEntityId]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterwellKnownEntityId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterepicCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[epicCode]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterepicCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDocument>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Acceptable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EquipmentCollection>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Creates new Workorder</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task Equipment2Async(EquipmentShellRequest body)
        {
            return Equipment2Async(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates new Workorder</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task Equipment2Async(EquipmentShellRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v2/equipment");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDocument>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Gets the equipment with the specified ID.</summary>
        /// <param name="id">The equipment's identifier.</param>
        /// <param name="include">Specify the resources to include by comma separating them from any of these: **alternateIdentities, attributes, childEquipment, classifications, comments, equipmentDemandSummary, futureMaintenanceCalls, measurementPoints, movementSummary, pairedEquipment, parentEquipment, unmanagedAttributes, workorders**</param>
        /// <param name="filtercontrolSiteCode">Filter by &lt;strong&gt;control site code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtercontrolSiteId">Filter by &lt;strong&gt;control site id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentCode">Filter by &lt;strong&gt;equipment code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentState">Filter by &lt;strong&gt;equipment state&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentType">Filter by &lt;strong&gt;equipment type&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtermanufacturerSerialNumber">Filter by &lt;strong&gt;manufacturer serial number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtermaterialNumber">Filter by &lt;strong&gt;material number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterownerSiteCode">Filter by &lt;strong&gt;owner site code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterownerSiteId">Filter by &lt;strong&gt;owner site id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterpairedEquipmentId">Filter by &lt;strong&gt;paired equipment id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterparentEquipmentId">Filter by &lt;strong&gt;parent equipment id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterserialNumber">Filter by &lt;strong&gt;serial number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterwellKnownEntityId">Filter by &lt;strong&gt;well known entity id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <returns>The equipment with the specified ID</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Equipment> Equipment3Async(string id, string include, string filtercontrolSiteCode, string filtercontrolSiteId, string filterequipmentCode, string filterequipmentState, string filterequipmentType, string filtermanufacturerSerialNumber, string filtermaterialNumber, string filterownerSiteCode, string filterownerSiteId, string filterpairedEquipmentId, string filterparentEquipmentId, string filterserialNumber, string filterwellKnownEntityId)
        {
            return Equipment3Async(id, include, filtercontrolSiteCode, filtercontrolSiteId, filterequipmentCode, filterequipmentState, filterequipmentType, filtermanufacturerSerialNumber, filtermaterialNumber, filterownerSiteCode, filterownerSiteId, filterpairedEquipmentId, filterparentEquipmentId, filterserialNumber, filterwellKnownEntityId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the equipment with the specified ID.</summary>
        /// <param name="id">The equipment's identifier.</param>
        /// <param name="include">Specify the resources to include by comma separating them from any of these: **alternateIdentities, attributes, childEquipment, classifications, comments, equipmentDemandSummary, futureMaintenanceCalls, measurementPoints, movementSummary, pairedEquipment, parentEquipment, unmanagedAttributes, workorders**</param>
        /// <param name="filtercontrolSiteCode">Filter by &lt;strong&gt;control site code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtercontrolSiteId">Filter by &lt;strong&gt;control site id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentCode">Filter by &lt;strong&gt;equipment code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentState">Filter by &lt;strong&gt;equipment state&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterequipmentType">Filter by &lt;strong&gt;equipment type&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtermanufacturerSerialNumber">Filter by &lt;strong&gt;manufacturer serial number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filtermaterialNumber">Filter by &lt;strong&gt;material number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterownerSiteCode">Filter by &lt;strong&gt;owner site code&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterownerSiteId">Filter by &lt;strong&gt;owner site id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterpairedEquipmentId">Filter by &lt;strong&gt;paired equipment id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterparentEquipmentId">Filter by &lt;strong&gt;parent equipment id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterserialNumber">Filter by &lt;strong&gt;serial number&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <param name="filterwellKnownEntityId">Filter by &lt;strong&gt;well known entity id&lt;/strong&gt;. Separate multiple values with a comma.</param>
        /// <returns>The equipment with the specified ID</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Equipment> Equipment3Async(string id, string include, string filtercontrolSiteCode, string filtercontrolSiteId, string filterequipmentCode, string filterequipmentState, string filterequipmentType, string filtermanufacturerSerialNumber, string filtermaterialNumber, string filterownerSiteCode, string filterownerSiteId, string filterpairedEquipmentId, string filterparentEquipmentId, string filterserialNumber, string filterwellKnownEntityId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v2/equipment/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (include != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("include") + "=").Append(System.Uri.EscapeDataString(ConvertToString(include, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filtercontrolSiteCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[controlSiteCode]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filtercontrolSiteCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filtercontrolSiteId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[controlSiteId]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filtercontrolSiteId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterequipmentCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[equipmentCode]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterequipmentCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterequipmentState != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[equipmentState]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterequipmentState, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterequipmentType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[equipmentType]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterequipmentType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filtermanufacturerSerialNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[manufacturerSerialNumber]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filtermanufacturerSerialNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filtermaterialNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[materialNumber]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filtermaterialNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterownerSiteCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[ownerSiteCode]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterownerSiteCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterownerSiteId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[ownerSiteId]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterownerSiteId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterpairedEquipmentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[pairedEquipmentId]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterpairedEquipmentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterparentEquipmentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[parentEquipmentId]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterparentEquipmentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterserialNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[serialNumber]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterserialNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filterwellKnownEntityId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter[wellKnownEntityId]") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filterwellKnownEntityId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Equipment>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDocument>("equipment has missing/invalid values", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDocument>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Oops! Can\'t get equipment right now", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Gets the workorders associated with the specified equipment.</summary>
        /// <param name="id">The equipment's identifier.</param>
        /// <param name="include">Specify the resources to include by comma separating them from any of these: **attributes, unmanagedAttributes**</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WorkorderReferenceCollection> WorkordersAsync(string id, string include)
        {
            return WorkordersAsync(id, include, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the workorders associated with the specified equipment.</summary>
        /// <param name="id">The equipment's identifier.</param>
        /// <param name="include">Specify the resources to include by comma separating them from any of these: **attributes, unmanagedAttributes**</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WorkorderReferenceCollection> WorkordersAsync(string id, string include, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v2/equipment/{id}/workorders?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (include != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("include") + "=").Append(System.Uri.EscapeDataString(ConvertToString(include, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Success", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkorderReferenceCollection>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Gets the EquipmentModel with the specified equipmentcode.</summary>
        /// <param name="equipmentcode">The equipmentcode.</param>
        /// <returns>The EquipmentModel with the specified equipmentcode</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EquipmentModel> SbomAsync(string equipmentcode)
        {
            return SbomAsync(equipmentcode, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the EquipmentModel with the specified equipmentcode.</summary>
        /// <param name="equipmentcode">The equipmentcode.</param>
        /// <returns>The EquipmentModel with the specified equipmentcode</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EquipmentModel> SbomAsync(string equipmentcode, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v2/equipmentmodels/{equipmentcode}/sbom");
            urlBuilder_.Replace("{equipmentcode}", System.Uri.EscapeDataString(ConvertToString(equipmentcode, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDocument>("EquipmentModel has missing/invalid values", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDocument>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EquipmentModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Gets the Strategy with the specified EquipmentCode, MaintenanceActivityTypeCode and Level.</summary>
        /// <param name="equipmentcode">The equipmentcode.</param>
        /// <param name="maintenanceactivitytypecode">MaintenanceActivityTypeCode</param>
        /// <param name="level">MaintenanceActivityTypeLevel</param>
        /// <returns>The MaintenanceStrategy with the specified EquipmentCode, MaintenanceActivityTypeCode and Level</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EquipmentModel> LevelAsync(string equipmentcode, string maintenanceactivitytypecode, string level)
        {
            return LevelAsync(equipmentcode, maintenanceactivitytypecode, level, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the Strategy with the specified EquipmentCode, MaintenanceActivityTypeCode and Level.</summary>
        /// <param name="equipmentcode">The equipmentcode.</param>
        /// <param name="maintenanceactivitytypecode">MaintenanceActivityTypeCode</param>
        /// <param name="level">MaintenanceActivityTypeLevel</param>
        /// <returns>The MaintenanceStrategy with the specified EquipmentCode, MaintenanceActivityTypeCode and Level</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EquipmentModel> LevelAsync(string equipmentcode, string maintenanceactivitytypecode, string level, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v2/equipmentmodels/{equipmentcode}/sbom/{maintenanceactivitytypecode}/level/{level}");
            urlBuilder_.Replace("{equipmentcode}", System.Uri.EscapeDataString(ConvertToString(equipmentcode, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{maintenanceactivitytypecode}", System.Uri.EscapeDataString(ConvertToString(maintenanceactivitytypecode, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{level}", System.Uri.EscapeDataString(ConvertToString(level, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDocument>("MaintenanceStrategy has missing/invalid values", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDocument>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EquipmentModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get the ToolSetTemplates using the specified query parameters.</summary>
        /// <returns>The ToolSetTemplate with the specified query</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ToolSetTemplate> ToolsettemplatesAsync()
        {
            return ToolsettemplatesAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the ToolSetTemplates using the specified query parameters.</summary>
        /// <returns>The ToolSetTemplate with the specified query</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ToolSetTemplate> ToolsettemplatesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v2/toolsettemplates");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDocument>("ToolSetTemplates has missing/invalid values", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Acceptable", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ToolSetTemplate>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Gets the ToolSetTemplates with the specified equipmentcode.</summary>
        /// <param name="equipmentcode">The equipmentcode.</param>
        /// <returns>The ToolSetTemplate with the specified equipmentcode</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ToolSetTemplateCollection> Toolsettemplates2Async(string equipmentcode)
        {
            return Toolsettemplates2Async(equipmentcode, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the ToolSetTemplates with the specified equipmentcode.</summary>
        /// <param name="equipmentcode">The equipmentcode.</param>
        /// <returns>The ToolSetTemplate with the specified equipmentcode</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ToolSetTemplateCollection> Toolsettemplates2Async(string equipmentcode, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/v2/toolsettemplates/{equipmentcode}");
            urlBuilder_.Replace("{equipmentcode}", System.Uri.EscapeDataString(ConvertToString(equipmentcode, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDocument>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorDocument>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ErrorDocument>("ToolSetTemplates has missing/invalid values", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ToolSetTemplateCollection>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Link 
    {
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }
    
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Links 
    {
        [Newtonsoft.Json.JsonProperty("actualLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Link> ActualLinks { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorSource 
    {
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pointer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pointer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Error 
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }
    
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Meta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorSource Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Model 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorDocument 
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error> Errors { get; set; }
    
        [Newtonsoft.Json.JsonProperty("included", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Model> Included { get; set; }
    
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Link> Links { get; set; }
    
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Meta { get; set; }
    
    
    }
    
    /// <summary>A machine-readable format for specifying errors in HTTP API responses based on https://tools.ietf.org/html/rfc7807.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProblemDetails 
    {
        /// <summary>A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be 'about: blank'.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>A short, human-readable summary of the problem type. It will generally not change from occurrence to occurrence of the problem.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }
    
        /// <summary>A human-readable explanation specific to this occurrence of the problem</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        /// <summary>URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.</summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }
    
        /// <summary>Any extensions that the API may provide</summary>
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Extensions { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlternateIdentity 
    {
        [Newtonsoft.Json.JsonProperty("alternateSystemRecordId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlternateSystemRecordId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sourceSystemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceSystemId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Classification 
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
    
    }
    
    /// <summary>&lt;ul&gt;&lt;li&gt;0 - PCV&lt;/li&gt;&lt;li&gt;1 - ServiceAssembly&lt;/li&gt;&lt;li&gt;2 - Equipment&lt;/li&gt;&lt;li&gt;3 - SubAssembly&lt;/li&gt;&lt;/ul&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum EquipmentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PCV")]
        PCV = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAssembly")]
        ServiceAssembly = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Equipment")]
        Equipment = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SubAssembly")]
        SubAssembly = 3,
    
    }
    
    /// <summary>&lt;ul&gt;&lt;li&gt;0 - SLB&lt;/li&gt;&lt;li&gt;1 - Customer&lt;/li&gt;&lt;li&gt;2 - Rental&lt;/li&gt;&lt;/ul&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Ownership
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SLB")]
        SLB = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Customer")]
        Customer = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rental")]
        Rental = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EquipmentReference 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("equipmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EquipmentCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Manufacturer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("manufacturersCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturersCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AttributeValue 
    {
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dimension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dimension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sequence { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UnmanagedAttributeValue 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
    
    }
    
    /// <summary>Projection of the Work Order into the Equipment Context.
    /// For Identification, not for the Content properties.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WorkorderReference 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ModifiedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maintenanceActivitySubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaintenanceActivitySubType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maintenanceActivityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaintenanceActivityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parentWorkorderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentWorkorderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("plannedEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PlannedEndDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("plannedStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PlannedStartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Priority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repairSiteCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepairSiteCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("repairSiteId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepairSiteId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusChangeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StatusChangeDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workorderNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkorderNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("workorderStatusValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkorderStatusValue { get; set; }
    
        /// <summary>Total task associated with a workorder.</summary>
        [Newtonsoft.Json.JsonProperty("totalTaskCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalTaskCount { get; set; }
    
        /// <summary>Completed task count associated with workorder.</summary>
        [Newtonsoft.Json.JsonProperty("completedTaskCount", Required = Newtonsoft.Json.Required.Always)]
        public int CompletedTaskCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttributeValue> Attributes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unmanagedAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, UnmanagedAttributeValue>> UnmanagedAttributes { get; set; }
    
    
    }
    
    /// <summary>Represents the status of an equipment.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EquipmentStatus 
    {
        /// <summary>The Technical status of the Equipment.</summary>
        [Newtonsoft.Json.JsonProperty("technicalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TechnicalStatus { get; set; }
    
        /// <summary>The Movement status of the Equipment.</summary>
        [Newtonsoft.Json.JsonProperty("movementStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MovementStatus { get; set; }
    
        /// <summary>The Repair status of the Equipment.</summary>
        [Newtonsoft.Json.JsonProperty("repairStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepairStatus { get; set; }
    
        /// <summary>The Logistics status of the Equipment. 
        /// This is not the same as Movement status.</summary>
        [Newtonsoft.Json.JsonProperty("logisticsStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogisticsStatus { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MeasurementPointReference 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ModifiedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("defaultUOM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultUOM { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FutureMaintenanceCall 
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("previousWorkorderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousWorkorderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nextWorkorderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextWorkorderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nextDueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? NextDueDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastCompletedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastCompletedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pmNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PmNumber { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Movement 
    {
        [Newtonsoft.Json.JsonProperty("movementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MovementId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipmentNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipmentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ShipmentDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MovementSummary 
    {
        [Newtonsoft.Json.JsonProperty("movements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Movement> Movements { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Comment 
    {
        [Newtonsoft.Json.JsonProperty("commentDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CommentDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commentedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommentedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commentText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommentText { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EquipmentDemandPlan 
    {
        [Newtonsoft.Json.JsonProperty("equipmentDemandNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EquipmentDemandNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rigName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RigName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("activitywkeid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Activitywkeid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("activityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActivityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("edoPlannedShipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EdoPlannedShipDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("edfPlannedShipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EdfPlannedShipDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EquipmentDemandSummary 
    {
        [Newtonsoft.Json.JsonProperty("equipmentDemandPlans", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EquipmentDemandPlan> EquipmentDemandPlans { get; set; }
    
    
    }
    
    /// <summary>Class to hold equipment location related information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Location 
    {
        /// <summary>Name of the location</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Type of the location</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
    
    }
    
    /// <summary>Class to hold equipment position related information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Position 
    {
        /// <summary>Name of the position</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Type of the position</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
    
    }
    
    /// <summary>Equipment is the Physical Entity that represents the real-world object that
    /// provides a some value/service to a business. Other terms that are used for
    /// Equipment include:
    /// &lt;ul&gt;&lt;li&gt;Tool&lt;/li&gt;&lt;li&gt;Asset&lt;/li&gt;&lt;li&gt;Product&lt;/li&gt;&lt;/ul&gt;
    /// Equipment is typically maintained and monitored via Measure Points. An
    /// Equipment will be associated to a Financial Asset. All equipment are traceable
    /// and trackable via a Serial Number - Equipment Code combination.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Equipment 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ModifiedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("activeCmms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActiveCmms { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sourceSystemRecordId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceSystemRecordId { get; set; }
    
        /// <summary>Alternate identities of the equipment.</summary>
        [Newtonsoft.Json.JsonProperty("alternateIdentities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AlternateIdentity> AlternateIdentities { get; set; }
    
        /// <summary>The code from the control site associated with the equipment.</summary>
        [Newtonsoft.Json.JsonProperty("controlSiteCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ControlSiteCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("controlSiteId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ControlSiteId { get; set; }
    
        /// <summary>Description of the equipment. This is typically inherited from the reference
        /// equipment template, but can be changed as modifications are implemented.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>EPIC Equipment Code is  similar to a model number.  It Identifies the type of
        /// equipment and replaces the legacy term "File Code".
        /// The Equipment Code is the link to the Equipment Template (aka Reference
        /// Equipment) that contains the Maintenance Program and default definition of the
        /// Equipment.
        /// It differs from a Material Number in that a material number defines what an
        /// equipment, the Equipment Code identifies How it is used.
        /// AKA
        /// - File Code
        /// - Model
        /// - EPIC code</summary>
        [Newtonsoft.Json.JsonProperty("equipmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EquipmentCode { get; set; }
    
        /// <summary>List of all taxonomies the equipment belongs to.</summary>
        [Newtonsoft.Json.JsonProperty("classifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<Classification>> Classifications { get; set; }
    
        /// <summary>The state of the equipment.</summary>
        [Newtonsoft.Json.JsonProperty("equipmentState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EquipmentState { get; set; }
    
        [Newtonsoft.Json.JsonProperty("equipmentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EquipmentType EquipmentType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Manufacturer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("manufacturedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ManufacturedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("manufacturerSerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerSerialNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("materialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaterialNumber { get; set; }
    
        /// <summary>Customer/vendor name, which is defined based on the ownership attribute.</summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ownership", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Ownership Ownership { get; set; }
    
        /// <summary>The code for the owning site associated with the equipment.</summary>
        [Newtonsoft.Json.JsonProperty("ownerSiteCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerSiteCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ownerSiteId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerSiteId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pairedEquipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Equipment PairedEquipment { get; set; }
    
        /// <summary>The ID of the paired equipment if there is one.</summary>
        [Newtonsoft.Json.JsonProperty("pairedEquipmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PairedEquipmentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parentEquipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Equipment ParentEquipment { get; set; }
    
        /// <summary>The ID of the parent equipment if there is one.</summary>
        [Newtonsoft.Json.JsonProperty("parentEquipmentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentEquipmentId { get; set; }
    
        /// <summary>Child Equipment</summary>
        [Newtonsoft.Json.JsonProperty("childEquipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EquipmentReference> ChildEquipment { get; set; }
    
        /// <summary>Key identifier for the Equipment used for tracking purposes.
        /// The Serial Number is only unique within the context of the Material Number.
        /// Together the Material Number and Serial Number provide a Natural Unique Key for the Equipment.</summary>
        [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }
    
        /// <summary>Well-known Equipment ID, in form of MaterialNumber:SerialNumber,
        /// both as given at birth.</summary>
        [Newtonsoft.Json.JsonProperty("wellKnownEntityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WellKnownEntityId { get; set; }
    
        /// <summary>References to work orders associated with this piece of equipment.</summary>
        [Newtonsoft.Json.JsonProperty("workorders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkorderReference> Workorders { get; set; }
    
        [Newtonsoft.Json.JsonProperty("equipmentStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EquipmentStatus EquipmentStatus { get; set; }
    
        /// <summary>Reference to Measurement Points</summary>
        [Newtonsoft.Json.JsonProperty("measurementPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MeasurementPointReference> MeasurementPoints { get; set; }
    
        /// <summary>Future maintenance data.</summary>
        [Newtonsoft.Json.JsonProperty("futureMaintenanceCalls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FutureMaintenanceCall> FutureMaintenanceCalls { get; set; }
    
        [Newtonsoft.Json.JsonProperty("movementSummary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MovementSummary MovementSummary { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comment Comments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("equipmentDemandSummary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EquipmentDemandSummary EquipmentDemandSummary { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("revision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Revision { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryOfOrigin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryOfOrigin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OriginationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("orderLineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderLineId { get; set; }
    
        /// <summary>Manufacturer's as advertised/promoted code.</summary>
        [Newtonsoft.Json.JsonProperty("manufacturersCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturersCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Position Position { get; set; }
    
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttributeValue> Attributes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unmanagedAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, UnmanagedAttributeValue>> UnmanagedAttributes { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionMeta 
    {
        [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalCount { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EquipmentCollection 
    {
        [Newtonsoft.Json.JsonProperty("collection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Equipment> Collection { get; set; }
    
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Link> Links { get; set; }
    
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CollectionMeta Meta { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EquipmentShellRequest 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ModifiedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("assetNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("wellKnownEntityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WellKnownEntityId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("materialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaterialNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("equipmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EquipmentCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Manufacturer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("revision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Revision { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryOfOrigin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryOfOrigin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OriginationDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WorkorderReferenceCollection 
    {
        [Newtonsoft.Json.JsonProperty("collection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkorderReference> Collection { get; set; }
    
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Link> Links { get; set; }
    
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CollectionMeta Meta { get; set; }
    
    
    }
    
    /// <summary>&lt;ul&gt;&lt;li&gt;0 - None&lt;/li&gt;&lt;li&gt;880 - RITE&lt;/li&gt;&lt;li&gt;990 - QTrac&lt;/li&gt;&lt;li&gt;2392 - Maximo&lt;/li&gt;&lt;li&gt;6010 - MT&lt;/li&gt;&lt;li&gt;6382 - Mateo&lt;/li&gt;&lt;/ul&gt;</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CmmsId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QTrac")]
        QTrac = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Maximo")]
        Maximo = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RITE")]
        RITE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MT")]
        MT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Mateo")]
        Mateo = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Sbom 
    {
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("materialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaterialNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Always)]
        public double UnitPrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uom { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MaintenanceStrategy 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ModifiedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("equipmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EquipmentCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maintenanceActivityTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaintenanceActivityTypeCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maintenanceActivityTypeLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaintenanceActivityTypeLevel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sboms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sbom> Sboms { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EquipmentModel 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ModifiedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("activeCmmsId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CmmsId ActiveCmmsId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("equipmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EquipmentCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maintenanceStrategies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MaintenanceStrategy> MaintenanceStrategies { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Alternate 
    {
        [Newtonsoft.Json.JsonProperty("materialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaterialNumber { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BuildItem 
    {
        [Newtonsoft.Json.JsonProperty("equipmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EquipmentCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("materialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaterialNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("alternates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Alternate> Alternates { get; set; }
    
        /// <summary>List of attributes.</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttributeValue> Attributes { get; set; }
    
    
    }
    
    /// <summary>ToolSetTemplate is the Physical Entity that represents the entity
    /// from MAXIMO</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToolSetTemplate 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ModifiedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedBy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("activeCmmsId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CmmsId ActiveCmmsId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("equipmentCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EquipmentCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("buildItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BuildItem> BuildItems { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ToolSetTemplateCollection 
    {
        [Newtonsoft.Json.JsonProperty("collection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ToolSetTemplate> Collection { get; set; }
    
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Link> Links { get; set; }
    
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CollectionMeta Meta { get; set; }
    
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108